{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPXAmL4rnPkyfPuQ71BHTJN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"URc3unlX8DLk"},"outputs":[],"source":["import numpy as np"]},{"cell_type":"code","source":["a = np.arange(5,55,5)\n","a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Bh_BjgmB9Nj","executionInfo":{"status":"ok","timestamp":1727794355647,"user_tz":-330,"elapsed":448,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"2af09936-9f43-4609-bc82-cbc9bed6b27a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["a = np.array([[[2,1,1],[3,2,1],[2,1,2]]])\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1nWo-eppzNeK","executionInfo":{"status":"ok","timestamp":1727794384292,"user_tz":-330,"elapsed":434,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"6eae03af-9aeb-47b2-b966-7d72784ca25e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[2 1 1]\n","  [3 2 1]\n","  [2 1 2]]]\n"]}]},{"cell_type":"code","source":["a_inv = np.linalg.inv(a)\n","print(a_inv)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ShAgKztIzblv","executionInfo":{"status":"ok","timestamp":1727794386233,"user_tz":-330,"elapsed":12,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"1e7edc59-320e-4701-fcbb-1f640518425b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[ 3. -1. -1.]\n","  [-4.  2.  1.]\n","  [-1.  0.  1.]]]\n"]}]},{"cell_type":"code","source":["a = np.array([1.0, 2, 3.5, 0.2, True])  #input as list\n","print(a)\n","print(type(a))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gmDeGmJBBtBV","executionInfo":{"status":"ok","timestamp":1727794393042,"user_tz":-330,"elapsed":434,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"29b05cd2-da79-4408-dded-e81f552f7d53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1.  2.  3.5 0.2 1. ]\n","<class 'numpy.ndarray'>\n"]}]},{"cell_type":"code","source":["b = (1,2,3)  #input as tuple\n","b1 = np.array(b)\n","print(b1)"],"metadata":{"id":"_KDkGcgdCUWG","executionInfo":{"status":"ok","timestamp":1727794400676,"user_tz":-330,"elapsed":390,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"812fadd7-e14d-4053-fb57-9df8f5604d7a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"syM7L-HrNYHe"},"outputs":[],"source":["# Define list\n","heights = [74, 74, 72, 72, 73, 69, 69, 71, 76, 71, 73, 73, 74, 74, 69, 70, 73, 75, 78, 79, 76, 74, 76, 72, 71, 75, 77, 74, 73, 74, 78, 73, 75, 73, 75, 75, 74, 69, 71, 74, 73, 73, 76, 74, 74, 70, 72, 77, 74, 70, 73, 75, 76, 76, 78, 74, 74, 76, 77, 81, 78, 75, 77, 75, 76, 74, 72, 72, 75, 73, 73, 73, 70, 70, 70, 76, 68, 71, 72, 75, 75, 75, 75, 68, 74, 78, 71, 73, 76, 74, 74, 79, 75, 73, 76, 74, 74, 73, 72, 74, 73, 74, 72, 73, 69, 72, 73, 75, 75, 73, 72, 72, 76, 74, 72, 77, 74, 77, 75, 76, 80, 74, 74, 75, 78, 73, 73, 74, 75, 76, 71, 73, 74, 76, 76, 74, 73, 74, 70, 72, 73, 73, 73, 73, 71, 74, 74, 72, 74, 71, 74, 73, 75, 75, 79, 73, 75, 76, 74, 76, 78, 74, 76, 72, 74, 76, 74, 75, 78, 75, 72, 74, 72, 74, 70, 71, 70, 75, 71, 71, 73, 72, 71, 73, 72, 75, 74, 74, 75, 73, 77, 73, 76, 75, 74, 76, 75, 73, 71, 76, 75, 72, 71, 77, 73, 74, 71, 72, 74, 75, 73, 72, 75, 75, 74, 72, 74, 71, 70, 74, 77, 77, 75, 75, 78, 75, 76, 73, 75, 75, 79, 77, 76, 71, 75, 74, 69, 71, 76, 72, 72, 70, 72, 73, 71, 72, 71, 73, 72, 73, 74, 74, 72, 75, 74, 74, 77, 75, 73, 72, 71, 74, 77, 75, 75, 75, 78, 78, 74, 76, 78, 76, 70, 72, 80, 74, 74, 71, 70, 72, 71, 74, 71, 72, 71, 74, 69, 76, 75, 75, 76, 73, 76, 73, 77, 73, 72, 72, 77, 77, 71, 74, 74, 73, 78, 75, 73, 70, 74, 72, 73, 73, 75, 75, 74, 76, 73, 74, 75, 75, 72, 73, 73, 72, 74, 78, 76, 73, 74, 75, 70, 75, 71, 72, 78, 75, 73, 73, 71, 75, 77, 72, 69, 73, 74, 72, 70, 75, 70, 72, 72, 74, 73, 74, 76, 75, 80, 72, 75, 73, 74, 74, 73, 75, 75, 71, 73, 75, 74, 74, 72, 74, 74, 74, 73, 76, 75, 72, 73, 73, 73, 72, 72, 72, 72, 71, 75, 75, 74, 73, 75, 79, 74, 76, 73, 74, 74, 72, 74, 74, 75, 78, 74, 74, 74, 77, 70, 73, 74, 73, 71, 75, 71, 72, 77, 74, 70, 77, 73, 72, 76, 71, 76, 78, 75, 73, 78, 74, 79, 75, 76, 72, 75, 75, 70, 72, 70, 74, 71, 76, 73, 76, 71, 69, 72, 72, 69, 73, 69, 73, 74, 74, 72, 71, 72, 72, 76, 76, 76, 74, 76, 75, 71, 72, 71, 73, 75, 76, 75, 71, 75, 74, 72, 73, 73, 73, 73, 76, 72, 76, 73, 73, 73, 75, 75, 77, 73, 72, 75, 70, 74, 72, 80, 71, 71, 74, 74, 73, 75, 76, 73, 77, 72, 73, 77, 76, 71, 75, 73, 74, 77, 71, 72, 73, 69, 73, 70, 74, 76, 73, 73, 75, 73, 79, 74, 73, 74, 77, 75, 74, 73, 77, 73, 77, 74, 74, 73, 77, 74, 77, 75, 77, 75, 71, 74, 70, 79, 72, 72, 70, 74, 74, 72, 73, 72, 74, 74, 76, 82, 74, 74, 70, 73, 73, 74, 77, 72, 76, 73, 73, 72, 74, 74, 71, 72, 75, 74, 74, 77, 70, 71, 73, 76, 71, 75, 74, 72, 76, 79, 76, 73, 76, 78, 75, 76, 72, 72, 73, 73, 75, 71, 76, 70, 75, 74, 75, 73, 71, 71, 72, 73, 73, 72, 69, 73, 78, 71, 73, 75, 76, 70, 74, 77, 75, 79, 72, 77, 73, 75, 75, 75, 73, 73, 76, 77, 75, 70, 71, 71, 75, 74, 69, 70, 75, 72, 75, 73, 72, 72, 72, 76, 75, 74, 69, 73, 72, 72, 75, 77, 76, 80, 77, 76, 79, 71, 75, 73, 76, 77, 73, 76, 70, 75, 73, 75, 70, 69, 71, 72, 72, 73, 70, 70, 73, 76, 75, 72, 73, 79, 71, 72, 74, 74, 74, 72, 76, 76, 72, 72, 71, 72, 72, 70, 77, 74, 72, 76, 71, 76, 71, 73, 70, 73, 73, 72, 71, 71, 71, 72, 72, 74, 74, 74, 71, 72, 75, 72, 71, 72, 72, 72, 72, 74, 74, 77, 75, 73, 75, 73, 76, 72, 77, 75, 72, 71, 71, 75, 72, 73, 73, 71, 70, 75, 71, 76, 73, 68, 71, 72, 74, 77, 72, 76, 78, 81, 72, 73, 76, 72, 72, 74, 76, 73, 76, 75, 70, 71, 74, 72, 73, 76, 76, 73, 71, 68, 71, 71, 74, 77, 69, 72, 76, 75, 76, 75, 76, 72, 74, 76, 74, 72, 75, 78, 77, 70, 72, 79, 74, 71, 68, 77, 75, 71, 72, 70, 72, 72, 73, 72, 74, 72, 72, 75, 72, 73, 74, 72, 78, 75, 72, 74, 75, 75, 76, 74, 74, 73, 74, 71, 74, 75, 76, 74, 76, 76, 73, 75, 75, 74, 68, 72, 75, 71, 70, 72, 73, 72, 75, 74, 70, 76, 71, 82, 72, 73, 74, 71, 75, 77, 72, 74, 72, 73, 78, 77, 73, 73, 73, 73, 73, 76, 75, 70, 73, 72, 73, 75, 74, 73, 73, 76, 73, 75, 70, 77, 72, 77, 74, 75, 75, 75, 75, 72, 74, 71, 76, 71, 75, 76, 83, 75, 74, 76, 72, 72, 75, 75, 72, 77, 73, 72, 70, 74, 72, 74, 72, 71, 70, 71, 76, 74, 76, 74, 74, 74, 75, 75, 71, 71, 74, 77, 71, 74, 75, 77, 76, 74, 76, 72, 71, 72, 75, 73, 68, 72, 69, 73, 73, 75, 70, 70, 74, 75, 74, 74, 73, 74, 75, 77, 73, 74, 76, 74, 75, 73, 76, 78, 75, 73, 77, 74, 72, 74, 72, 71, 73, 75, 73, 67, 67, 76, 74, 73, 70, 75, 70, 72, 77, 79, 78, 74, 75, 75, 78, 76, 75, 69, 75, 72, 75, 73, 74, 75, 75, 73]\n","weights = [180, 215, 210, 210, 188, 176, 209, 200, 231, 180, 188, 180, 185, 160, 180, 185, 189, 185, 219, 230, 205, 230, 195, 180, 192, 225, 203, 195, 182, 188, 200, 180, 200, 200, 245, 240, 215, 185, 175, 199, 200, 215, 200, 205, 206, 186, 188, 220, 210, 195, 200, 200, 212, 224, 210, 205, 220, 195, 200, 260, 228, 270, 200, 210, 190, 220, 180, 205, 210, 220, 211, 200, 180, 190, 170, 230, 155, 185, 185, 200, 225, 225, 220, 160, 205, 235, 250, 210, 190, 160, 200, 205, 222, 195, 205, 220, 220, 170, 185, 195, 220, 230, 180, 220, 180, 180, 170, 210, 215, 200, 213, 180, 192, 235, 185, 235, 210, 222, 210, 230, 220, 180, 190, 200, 210, 194, 180, 190, 240, 200, 198, 200, 195, 210, 220, 190, 210, 225, 180, 185, 170, 185, 185, 180, 178, 175, 200, 204, 211, 190, 210, 190, 190, 185, 290, 175, 185, 200, 220, 170, 220, 190, 220, 205, 200, 250, 225, 215, 210, 215, 195, 200, 194, 220, 180, 180, 170, 195, 180, 170, 206, 205, 200, 225, 201, 225, 233, 180, 225, 180, 220, 180, 237, 215, 190, 235, 190, 180, 165, 195, 200, 190, 190, 185, 185, 205, 190, 205, 206, 220, 208, 170, 195, 210, 190, 211, 230, 170, 185, 185, 241, 225, 210, 175, 230, 200, 215, 198, 226, 278, 215, 230, 240, 184, 219, 170, 218, 190, 225, 220, 176, 190, 197, 204, 167, 180, 195, 220, 215, 185, 190, 205, 205, 200, 210, 215, 200, 205, 211, 190, 208, 200, 210, 232, 230, 210, 220, 210, 202, 212, 225, 170, 190, 200, 237, 220, 170, 193, 190, 150, 220, 200, 190, 185, 185, 200, 172, 220, 225, 190, 195, 219, 190, 197, 200, 195, 210, 177, 220, 235, 180, 195, 195, 190, 230, 190, 200, 190, 190, 200, 200, 184, 200, 180, 219, 187, 200, 220, 205, 190, 170, 160, 215, 175, 205, 200, 214, 200, 190, 180, 205, 220, 190, 215, 235, 191, 200, 181, 200, 210, 240, 185, 165, 190, 185, 175, 155, 210, 170, 175, 220, 210, 205, 200, 205, 195, 240, 150, 200, 215, 202, 200, 190, 205, 190, 160, 215, 185, 200, 190, 210, 185, 220, 190, 202, 205, 220, 175, 160, 190, 200, 229, 206, 220, 180, 195, 175, 188, 230, 190, 200, 190, 219, 235, 180, 180, 180, 200, 234, 185, 220, 223, 200, 210, 200, 210, 190, 177, 227, 180, 195, 199, 175, 185, 240, 210, 180, 194, 225, 180, 205, 193, 230, 230, 220, 200, 249, 190, 208, 245, 250, 160, 192, 220, 170, 197, 155, 190, 200, 220, 210, 228, 190, 160, 184, 180, 180, 200, 176, 160, 222, 211, 195, 200, 175, 206, 240, 185, 260, 185, 221, 205, 200, 170, 201, 205, 185, 205, 245, 220, 210, 220, 185, 175, 170, 180, 200, 210, 175, 220, 206, 180, 210, 195, 200, 200, 164, 180, 220, 195, 205, 170, 240, 210, 195, 200, 205, 192, 190, 170, 240, 200, 205, 175, 250, 220, 224, 210, 195, 180, 245, 175, 180, 215, 175, 180, 195, 230, 230, 205, 215, 195, 180, 205, 180, 190, 180, 190, 190, 220, 210, 255, 190, 230, 200, 205, 210, 225, 215, 220, 205, 200, 220, 197, 225, 187, 245, 185, 185, 175, 200, 180, 188, 225, 200, 210, 245, 213, 231, 165, 228, 210, 250, 191, 190, 200, 215, 254, 232, 180, 215, 220, 180, 200, 170, 195, 210, 200, 220, 165, 180, 200, 200, 170, 224, 220, 180, 198, 240, 239, 185, 210, 220, 200, 195, 220, 230, 170, 220, 230, 165, 205, 192, 210, 205, 200, 210, 185, 195, 202, 205, 195, 180, 200, 185, 240, 185, 220, 205, 205, 180, 201, 190, 208, 240, 180, 230, 195, 215, 190, 195, 215, 215, 220, 220, 230, 195, 190, 195, 209, 204, 170, 185, 205, 175, 210, 190, 180, 180, 160, 235, 200, 210, 180, 190, 197, 203, 205, 170, 200, 250, 200, 220, 200, 190, 170, 190, 220, 215, 206, 215, 185, 235, 188, 230, 195, 168, 190, 160, 200, 200, 189, 180, 190, 200, 220, 187, 240, 190, 180, 185, 210, 220, 219, 190, 193, 175, 180, 215, 210, 200, 190, 185, 220, 170, 195, 205, 195, 210, 190, 190, 180, 220, 190, 186, 185, 190, 180, 190, 170, 210, 240, 220, 180, 210, 210, 195, 160, 180, 205, 200, 185, 245, 190, 210, 200, 200, 222, 215, 240, 170, 220, 156, 190, 202, 221, 200, 190, 210, 190, 200, 165, 190, 185, 230, 208, 209, 175, 180, 200, 205, 200, 250, 210, 230, 244, 202, 240, 200, 215, 177, 210, 170, 215, 217, 198, 200, 220, 170, 200, 230, 231, 183, 192, 167, 190, 180, 180, 215, 160, 205, 223, 175, 170, 190, 240, 175, 230, 223, 196, 167, 195, 190, 250, 190, 190, 190, 170, 160, 150, 225, 220, 209, 210, 176, 260, 195, 190, 184, 180, 195, 195, 219, 225, 212, 202, 185, 200, 209, 200, 195, 228, 210, 190, 212, 190, 218, 220, 190, 235, 210, 200, 188, 210, 235, 188, 215, 216, 220, 180, 185, 200, 210, 220, 185, 231, 210, 195, 200, 205, 200, 190, 250, 185, 180, 170, 180, 208, 235, 215, 244, 220, 185, 230, 190, 200, 180, 190, 196, 180, 230, 224, 160, 178, 205, 185, 210, 180, 190, 200, 257, 190, 220, 165, 205, 200, 208, 185, 215, 170, 235, 210, 170, 180, 170, 190, 150, 230, 203, 260, 246, 186, 210, 198, 210, 215, 180, 200, 245, 200, 192, 192, 200, 192, 205, 190, 186, 170, 197, 219, 200, 220, 207, 225, 207, 212, 225, 170, 190, 210, 230, 210, 200, 238, 234, 222, 200, 190, 170, 220, 223, 210, 215, 196, 175, 175, 189, 205, 210, 180, 180, 197, 220, 228, 190, 204, 165, 216, 220, 208, 210, 215, 195, 200, 215, 229, 240, 207, 205, 208, 185, 190, 170, 208, 225, 190, 225, 185, 180, 165, 240, 220, 212, 163, 215, 175, 205, 210, 205, 208, 215, 180, 200, 230, 211, 230, 190, 220, 180, 205, 190, 180, 205, 190, 195]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kuS3VSD-NYHr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794412864,"user_tz":-330,"elapsed":404,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"0ce9a4f6-e3d4-46e8-e791-81a6a0e5b2c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["[74 74 72 ... 75 75 73]\n","[180 215 210 ... 205 190 195]\n"]}],"source":["import numpy as np\n","\n","heights_in = np.array(heights)\n","print(heights_in)\n","weights_lb = np.array(weights)\n","print(weights_lb)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPtkkx_kNYIO","outputId":"c60f4f13-5987-4028-bf13-5494d0b31645","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794418189,"user_tz":-330,"elapsed":402,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["1015\n"]}],"source":["print(len(heights))\n","#heights.size\n","#heights.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tFh-kO3jNYIx","outputId":"3251762a-257d-4479-c89d-4baa00e6a72d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794421294,"user_tz":-330,"elapsed":449,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[1.8796 1.8796 1.8288 ... 1.905  1.905  1.8542]\n","[81.64656 97.52228 95.25432 ... 92.98636 86.18248 88.45044]\n"]}],"source":["heights_m = heights_in * 0.0254\n","print(heights_m)\n","weights_kg = weights_lb * 0.453592\n","print(weights_kg)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hqst4kWvNYJM","outputId":"ff42d633-cb24-477b-bacb-ba3e061ac275","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794422659,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[23.11037639 27.60406069 28.48080465 ... 25.62295933 23.74810865\n"," 25.72686361]\n"]}],"source":["bmi = weights_kg / (heights_m ** 2)\n","print(bmi)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JT-qmbkPNYKG","outputId":"53773e49-b289-4ccd-a36e-69975ad07467","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794428919,"user_tz":-330,"elapsed":434,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False, False, ..., False, False, False])"]},"metadata":{},"execution_count":16}],"source":["bmi < 21"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A9NNHZ8wNYKO","outputId":"f6a65423-83c4-4d76-8778-e1f04a7c0c59","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794430554,"user_tz":-330,"elapsed":9,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([20.54255679, 20.54255679, 20.69282047, 20.69282047, 20.34343189,\n","       20.34343189, 20.69282047, 20.15883472, 19.4984471 , 20.69282047,\n","       20.9205219 ])"]},"metadata":{},"execution_count":17}],"source":["bmi [ bmi<21]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bbRRch9INYKq","outputId":"5bdcadbd-efaa-4abc-c246-2a312ec1856a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794473897,"user_tz":-330,"elapsed":420,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["26.05684565448554"]},"metadata":{},"execution_count":21}],"source":["#max(bmi)     #or bmi.max()\n","#min(bmi)     #or bmi.min()\n","#bmi.mean()\n","np.mean(bmi)"]},{"cell_type":"code","source":["a = np.arange(1,16,2)\n","print(a.reshape((4,2)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSQ5Tw5hp9ae","executionInfo":{"status":"ok","timestamp":1727794477980,"user_tz":-330,"elapsed":452,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"2fec4c83-cb3b-40ca-e33e-da351097f142"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  3]\n"," [ 5  7]\n"," [ 9 11]\n"," [13 15]]\n"]}]},{"cell_type":"code","source":["l = [[11,12,13,14],[21,22,23,24],[31,32,33,34]]\n","array_2d = np.array(l)\n","print(array_2d)\n","\n","col_first = array_2d[:,0]\n","row_first = array_2d[0,:]\n","col_last = array_2d[:,-1]\n","row_last = array_2d[-1,:]\n","col_2last = array_2d[:,-2:]\n","print()\n","print(col_first)\n","print(row_first)\n","print(col_last)\n","print(row_last)\n","print(col_2last)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jabna8uqhjAa","executionInfo":{"status":"ok","timestamp":1727794533542,"user_tz":-330,"elapsed":387,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"12dc7192-a68f-45d6-a379-352e472b66cf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[11 12 13 14]\n"," [21 22 23 24]\n"," [31 32 33 34]]\n","\n","[11 21 31]\n","[11 12 13 14]\n","[14 24 34]\n","[31 32 33 34]\n","[[13 14]\n"," [23 24]\n"," [33 34]]\n"]}]},{"cell_type":"code","source":["#take input here\n","import ast\n","input_list=[ 1, 5, 9, 12, 15, 7, 12, 9 ]\n","m=12\n","n=6\n","\n","import numpy as np\n","array_1 = np.array(input_list)\n","final_array = array_1 [(array_1 > m) & (array_1 < n)]\n","\n","print(final_array)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n0nLFAJ0fy6b","executionInfo":{"status":"ok","timestamp":1727794543499,"user_tz":-330,"elapsed":406,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"a5aca9f9-2b85-48cb-a0b7-411acf6d312c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"chRPTzaEd5W8"},"outputs":[],"source":["# list of height and weight of the players.\n","players = [(74, 180), (74, 215), (72, 210), (72, 210), (73, 188), (69, 176), (69, 209), (71, 200), (76, 231), (71, 180), (73, 188), (73, 180), (74, 185), (74, 160), (69, 180), (70, 185), (73, 189), (75, 185), (78, 219), (79, 230), (76, 205), (74, 230), (76, 195), (72, 180), (71, 192), (75, 225), (77, 203), (74, 195), (73, 182), (74, 188), (78, 200), (73, 180), (75, 200), (73, 200), (75, 245), (75, 240), (74, 215), (69, 185), (71, 175), (74, 199), (73, 200), (73, 215), (76, 200), (74, 205), (74, 206), (70, 186), (72, 188), (77, 220), (74, 210), (70, 195), (73, 200), (75, 200), (76, 212), (76, 224), (78, 210), (74, 205), (74, 220), (76, 195), (77, 200), (81, 260), (78, 228), (75, 270), (77, 200), (75, 210), (76, 190), (74, 220), (72, 180), (72, 205), (75, 210), (73, 220), (73, 211), (73, 200), (70, 180), (70, 190), (70, 170), (76, 230), (68, 155), (71, 185), (72, 185), (75, 200), (75, 225), (75, 225), (75, 220), (68, 160), (74, 205), (78, 235), (71, 250), (73, 210), (76, 190), (74, 160), (74, 200), (79, 205), (75, 222), (73, 195), (76, 205), (74, 220), (74, 220), (73, 170), (72, 185), (74, 195), (73, 220), (74, 230), (72, 180), (73, 220), (69, 180), (72, 180), (73, 170), (75, 210), (75, 215), (73, 200), (72, 213), (72, 180), (76, 192), (74, 235), (72, 185), (77, 235), (74, 210), (77, 222), (75, 210), (76, 230), (80, 220), (74, 180), (74, 190), (75, 200), (78, 210), (73, 194), (73, 180), (74, 190), (75, 240), (76, 200), (71, 198), (73, 200), (74, 195), (76, 210), (76, 220), (74, 190), (73, 210), (74, 225), (70, 180), (72, 185), (73, 170), (73, 185), (73, 185), (73, 180), (71, 178), (74, 175), (74, 200), (72, 204), (74, 211), (71, 190), (74, 210), (73, 190), (75, 190), (75, 185), (79, 290), (73, 175), (75, 185), (76, 200), (74, 220), (76, 170), (78, 220), (74, 190), (76, 220), (72, 205), (74, 200), (76, 250), (74, 225), (75, 215), (78, 210), (75, 215), (72, 195), (74, 200), (72, 194), (74, 220), (70, 180), (71, 180), (70, 170), (75, 195), (71, 180), (71, 170), (73, 206), (72, 205), (71, 200), (73, 225), (72, 201), (75, 225), (74, 233), (74, 180), (75, 225), (73, 180), (77, 220), (73, 180), (76, 237), (75, 215), (74, 190), (76, 235), (75, 190), (73, 180), (71, 165), (76, 195), (75, 200), (72, 190), (71, 190), (77, 185), (73, 185), (74, 205), (71, 190), (72, 205), (74, 206), (75, 220), (73, 208), (72, 170), (75, 195), (75, 210), (74, 190), (72, 211), (74, 230), (71, 170), (70, 185), (74, 185), (77, 241), (77, 225), (75, 210), (75, 175), (78, 230), (75, 200), (76, 215), (73, 198), (75, 226), (75, 278), (79, 215), (77, 230), (76, 240), (71, 184), (75, 219), (74, 170), (69, 218), (71, 190), (76, 225), (72, 220), (72, 176), (70, 190), (72, 197), (73, 204), (71, 167), (72, 180), (71, 195), (73, 220), (72, 215), (73, 185), (74, 190), (74, 205), (72, 205), (75, 200), (74, 210), (74, 215), (77, 200), (75, 205), (73, 211), (72, 190), (71, 208), (74, 200), (77, 210), (75, 232), (75, 230), (75, 210), (78, 220), (78, 210), (74, 202), (76, 212), (78, 225), (76, 170), (70, 190), (72, 200), (80, 237), (74, 220), (74, 170), (71, 193), (70, 190), (72, 150), (71, 220), (74, 200), (71, 190), (72, 185), (71, 185), (74, 200), (69, 172), (76, 220), (75, 225), (75, 190), (76, 195), (73, 219), (76, 190), (73, 197), (77, 200), (73, 195), (72, 210), (72, 177), (77, 220), (77, 235), (71, 180), (74, 195), (74, 195), (73, 190), (78, 230), (75, 190), (73, 200), (70, 190), (74, 190), (72, 200), (73, 200), (73, 184), (75, 200), (75, 180), (74, 219), (76, 187), (73, 200), (74, 220), (75, 205), (75, 190), (72, 170), (73, 160), (73, 215), (72, 175), (74, 205), (78, 200), (76, 214), (73, 200), (74, 190), (75, 180), (70, 205), (75, 220), (71, 190), (72, 215), (78, 235), (75, 191), (73, 200), (73, 181), (71, 200), (75, 210), (77, 240), (72, 185), (69, 165), (73, 190), (74, 185), (72, 175), (70, 155), (75, 210), (70, 170), (72, 175), (72, 220), (74, 210), (73, 205), (74, 200), (76, 205), (75, 195), (80, 240), (72, 150), (75, 200), (73, 215), (74, 202), (74, 200), (73, 190), (75, 205), (75, 190), (71, 160), (73, 215), (75, 185), (74, 200), (74, 190), (72, 210), (74, 185), (74, 220), (74, 190), (73, 202), (76, 205), (75, 220), (72, 175), (73, 160), (73, 190), (73, 200), (72, 229), (72, 206), (72, 220), (72, 180), (71, 195), (75, 175), (75, 188), (74, 230), (73, 190), (75, 200), (79, 190), (74, 219), (76, 235), (73, 180), (74, 180), (74, 180), (72, 200), (74, 234), (74, 185), (75, 220), (78, 223), (74, 200), (74, 210), (74, 200), (77, 210), (70, 190), (73, 177), (74, 227), (73, 180), (71, 195), (75, 199), (71, 175), (72, 185), (77, 240), (74, 210), (70, 180), (77, 194), (73, 225), (72, 180), (76, 205), (71, 193), (76, 230), (78, 230), (75, 220), (73, 200), (78, 249), (74, 190), (79, 208), (75, 245), (76, 250), (72, 160), (75, 192), (75, 220), (70, 170), (72, 197), (70, 155), (74, 190), (71, 200), (76, 220), (73, 210), (76, 228), (71, 190), (69, 160), (72, 184), (72, 180), (69, 180), (73, 200), (69, 176), (73, 160), (74, 222), (74, 211), (72, 195), (71, 200), (72, 175), (72, 206), (76, 240), (76, 185), (76, 260), (74, 185), (76, 221), (75, 205), (71, 200), (72, 170), (71, 201), (73, 205), (75, 185), (76, 205), (75, 245), (71, 220), (75, 210), (74, 220), (72, 185), (73, 175), (73, 170), (73, 180), (73, 200), (76, 210), (72, 175), (76, 220), (73, 206), (73, 180), (73, 210), (75, 195), (75, 200), (77, 200), (73, 164), (72, 180), (75, 220), (70, 195), (74, 205), (72, 170), (80, 240), (71, 210), (71, 195), (74, 200), (74, 205), (73, 192), (75, 190), (76, 170), (73, 240), (77, 200), (72, 205), (73, 175), (77, 250), (76, 220), (71, 224), (75, 210), (73, 195), (74, 180), (77, 245), (71, 175), (72, 180), (73, 215), (69, 175), (73, 180), (70, 195), (74, 230), (76, 230), (73, 205), (73, 215), (75, 195), (73, 180), (79, 205), (74, 180), (73, 190), (74, 180), (77, 190), (75, 190), (74, 220), (73, 210), (77, 255), (73, 190), (77, 230), (74, 200), (74, 205), (73, 210), (77, 225), (74, 215), (77, 220), (75, 205), (77, 200), (75, 220), (71, 197), (74, 225), (70, 187), (79, 245), (72, 185), (72, 185), (70, 175), (74, 200), (74, 180), (72, 188), (73, 225), (72, 200), (74, 210), (74, 245), (76, 213), (82, 231), (74, 165), (74, 228), (70, 210), (73, 250), (73, 191), (74, 190), (77, 200), (72, 215), (76, 254), (73, 232), (73, 180), (72, 215), (74, 220), (74, 180), (71, 200), (72, 170), (75, 195), (74, 210), (74, 200), (77, 220), (70, 165), (71, 180), (73, 200), (76, 200), (71, 170), (75, 224), (74, 220), (72, 180), (76, 198), (79, 240), (76, 239), (73, 185), (76, 210), (78, 220), (75, 200), (76, 195), (72, 220), (72, 230), (73, 170), (73, 220), (75, 230), (71, 165), (76, 205), (70, 192), (75, 210), (74, 205), (75, 200), (73, 210), (71, 185), (71, 195), (72, 202), (73, 205), (73, 195), (72, 180), (69, 200), (73, 185), (78, 240), (71, 185), (73, 220), (75, 205), (76, 205), (70, 180), (74, 201), (77, 190), (75, 208), (79, 240), (72, 180), (77, 230), (73, 195), (75, 215), (75, 190), (75, 195), (73, 215), (73, 215), (76, 220), (77, 220), (75, 230), (70, 195), (71, 190), (71, 195), (75, 209), (74, 204), (69, 170), (70, 185), (75, 205), (72, 175), (75, 210), (73, 190), (72, 180), (72, 180), (72, 160), (76, 235), (75, 200), (74, 210), (69, 180), (73, 190), (72, 197), (72, 203), (75, 205), (77, 170), (76, 200), (80, 250), (77, 200), (76, 220), (79, 200), (71, 190), (75, 170), (73, 190), (76, 220), (77, 215), (73, 206), (76, 215), (70, 185), (75, 235), (73, 188), (75, 230), (70, 195), (69, 168), (71, 190), (72, 160), (72, 200), (73, 200), (70, 189), (70, 180), (73, 190), (76, 200), (75, 220), (72, 187), (73, 240), (79, 190), (71, 180), (72, 185), (74, 210), (74, 220), (74, 219), (72, 190), (76, 193), (76, 175), (72, 180), (72, 215), (71, 210), (72, 200), (72, 190), (70, 185), (77, 220), (74, 170), (72, 195), (76, 205), (71, 195), (76, 210), (71, 190), (73, 190), (70, 180), (73, 220), (73, 190), (72, 186), (71, 185), (71, 190), (71, 180), (72, 190), (72, 170), (74, 210), (74, 240), (74, 220), (71, 180), (72, 210), (75, 210), (72, 195), (71, 160), (72, 180), (72, 205), (72, 200), (72, 185), (74, 245), (74, 190), (77, 210), (75, 200), (73, 200), (75, 222), (73, 215), (76, 240), (72, 170), (77, 220), (75, 156), (72, 190), (71, 202), (71, 221), (75, 200), (72, 190), (73, 210), (73, 190), (71, 200), (70, 165), (75, 190), (71, 185), (76, 230), (73, 208), (68, 209), (71, 175), (72, 180), (74, 200), (77, 205), (72, 200), (76, 250), (78, 210), (81, 230), (72, 244), (73, 202), (76, 240), (72, 200), (72, 215), (74, 177), (76, 210), (73, 170), (76, 215), (75, 217), (70, 198), (71, 200), (74, 220), (72, 170), (73, 200), (76, 230), (76, 231), (73, 183), (71, 192), (68, 167), (71, 190), (71, 180), (74, 180), (77, 215), (69, 160), (72, 205), (76, 223), (75, 175), (76, 170), (75, 190), (76, 240), (72, 175), (74, 230), (76, 223), (74, 196), (72, 167), (75, 195), (78, 190), (77, 250), (70, 190), (72, 190), (79, 190), (74, 170), (71, 160), (68, 150), (77, 225), (75, 220), (71, 209), (72, 210), (70, 176), (72, 260), (72, 195), (73, 190), (72, 184), (74, 180), (72, 195), (72, 195), (75, 219), (72, 225), (73, 212), (74, 202), (72, 185), (78, 200), (75, 209), (72, 200), (74, 195), (75, 228), (75, 210), (76, 190), (74, 212), (74, 190), (73, 218), (74, 220), (71, 190), (74, 235), (75, 210), (76, 200), (74, 188), (76, 210), (76, 235), (73, 188), (75, 215), (75, 216), (74, 220), (68, 180), (72, 185), (75, 200), (71, 210), (70, 220), (72, 185), (73, 231), (72, 210), (75, 195), (74, 200), (70, 205), (76, 200), (71, 190), (82, 250), (72, 185), (73, 180), (74, 170), (71, 180), (75, 208), (77, 235), (72, 215), (74, 244), (72, 220), (73, 185), (78, 230), (77, 190), (73, 200), (73, 180), (73, 190), (73, 196), (73, 180), (76, 230), (75, 224), (70, 160), (73, 178), (72, 205), (73, 185), (75, 210), (74, 180), (73, 190), (73, 200), (76, 257), (73, 190), (75, 220), (70, 165), (77, 205), (72, 200), (77, 208), (74, 185), (75, 215), (75, 170), (75, 235), (75, 210), (72, 170), (74, 180), (71, 170), (76, 190), (71, 150), (75, 230), (76, 203), (83, 260), (75, 246), (74, 186), (76, 210), (72, 198), (72, 210), (75, 215), (75, 180), (72, 200), (77, 245), (73, 200), (72, 192), (70, 192), (74, 200), (72, 192), (74, 205), (72, 190), (71, 186), (70, 170), (71, 197), (76, 219), (74, 200), (76, 220), (74, 207), (74, 225), (74, 207), (75, 212), (75, 225), (71, 170), (71, 190), (74, 210), (77, 230), (71, 210), (74, 200), (75, 238), (77, 234), (76, 222), (74, 200), (76, 190), (72, 170), (71, 220), (72, 223), (75, 210), (73, 215), (68, 196), (72, 175), (69, 175), (73, 189), (73, 205), (75, 210), (70, 180), (70, 180), (74, 197), (75, 220), (74, 228), (74, 190), (73, 204), (74, 165), (75, 216), (77, 220), (73, 208), (74, 210), (76, 215), (74, 195), (75, 200), (73, 215), (76, 229), (78, 240), (75, 207), (73, 205), (77, 208), (74, 185), (72, 190), (74, 170), (72, 208), (71, 225), (73, 190), (75, 225), (73, 185), (67, 180), (67, 165), (76, 240), (74, 220), (73, 212), (70, 163), (75, 215), (70, 175), (72, 205), (77, 210), (79, 205), (78, 208), (74, 215), (75, 180), (75, 200), (78, 230), (76, 211), (75, 230), (69, 190), (75, 220), (72, 180), (75, 205), (73, 190), (74, 180), (75, 205), (75, 190), (73, 195)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0nTr2iY3d5XB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794553311,"user_tz":-330,"elapsed":484,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"6b798fb6-bc95-457e-8269-6f43d999d1be"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 74 180]\n"," [ 74 215]\n"," [ 72 210]\n"," ...\n"," [ 75 205]\n"," [ 75 190]\n"," [ 73 195]]\n"]}],"source":["np_players = np.array(players)\n","print(np_players)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZSNAWumId5XC","outputId":"8c92af46-777a-465f-ffc6-91957c4c0eb6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794555914,"user_tz":-330,"elapsed":385,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1015, 2)"]},"metadata":{},"execution_count":27}],"source":["np_players.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZAHzv_HQd5XD","outputId":"8a251684-323d-45c7-df6e-299f4875b0dd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794558994,"user_tz":-330,"elapsed":582,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":28}],"source":["np_players.ndim"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iKQ3koqWd5XD","outputId":"db5a8c1b-c800-4bdb-c1d8-680e675b0f95","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794562960,"user_tz":-330,"elapsed":417,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('int64')"]},"metadata":{},"execution_count":29}],"source":["np_players.dtype"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pEvSn1ZBd5XE","outputId":"2bf03a43-496b-492d-857f-bcb44194ebc3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794564900,"user_tz":-330,"elapsed":5,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":30}],"source":["np_players.itemsize   #bit size"]},{"cell_type":"markdown","source":["heights to metres and weights to kg's conversion"],"metadata":{"id":"eu8xsLEOfQg6"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1MOgFktd5XE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794568078,"user_tz":-330,"elapsed":361,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"5bccee49-8058-447a-ebf6-a11298f491bb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.8796 , 81.64656],\n","       [ 1.8796 , 97.52228],\n","       [ 1.8288 , 95.25432],\n","       ...,\n","       [ 1.905  , 92.98636],\n","       [ 1.905  , 86.18248],\n","       [ 1.8542 , 88.45044]])"]},"metadata":{},"execution_count":31}],"source":["players_converted = np_players * [0.0254, 0.453592]\n","players_converted"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ty1iwhIJd5XF","outputId":"0001706e-a6a2-4681-931c-62e21a948939","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794575208,"user_tz":-330,"elapsed":704,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1.8796 , 81.64656])"]},"metadata":{},"execution_count":32}],"source":["players_converted[0]   #1st row"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YyFEyyj4d5XF","outputId":"86dc7745-0f8a-4e0c-b85e-558e06d89fdb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794577454,"user_tz":-330,"elapsed":814,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["81.64656"]},"metadata":{},"execution_count":33}],"source":["players_converted[0][1]  #Fetch the first row 2nd element or players_converted[0,1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sqJpytx5d5XF","outputId":"cdb90e77-c239-4778-8249-d2da4772300f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794580071,"user_tz":-330,"elapsed":374,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.8796, 1.8796, 1.8288, ..., 1.905 , 1.905 , 1.8542])"]},"metadata":{},"execution_count":34}],"source":["players_converted[:, 0]   #Fetch the first column from the array   only heights"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3z6vOFtad5XG","outputId":"a5e2011a-b413-42f9-db6e-3517d915074c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727794591227,"user_tz":-330,"elapsed":766,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.9811999999999999"]},"metadata":{},"execution_count":35}],"source":["players_converted[124][0]   #Fetch the height (1st column) of 125th player\n","#or players_converted[124,0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QlnOWzPXd5XG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727795303704,"user_tz":-330,"elapsed":383,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"078ec477-7d98-41d3-db66-725f7d6bd552"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.8796 , 81.64656],\n","       [ 1.8796 , 97.52228],\n","       [ 1.8288 , 95.25432],\n","       ...,\n","       [ 1.905  , 92.98636],\n","       [ 1.905  , 86.18248],\n","       [ 1.8542 , 88.45044]])"]},"metadata":{},"execution_count":36}],"source":["tall_players = players_converted[players_converted[:,0] > 1.8]  #heights morethan 1.8 metres\n","tall_players"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LLP1Tn3Od5XG","outputId":"f20c7dbc-13de-4567-a0e4-d64193620d29","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727795310932,"user_tz":-330,"elapsed":962,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1015, 2)"]},"metadata":{},"execution_count":37}],"source":["players_converted.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vbAa4ROd5XG","outputId":"9c1fdd7c-163d-46a8-baeb-6ae8ebe56071","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727795311327,"user_tz":-330,"elapsed":2,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(936, 2)"]},"metadata":{},"execution_count":38}],"source":["tall_players.shape"]},{"cell_type":"markdown","metadata":{"id":"kb-XWbSNd5XH"},"source":["##### Skills Array - holds the player key skills."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DKeTXJald5XH","outputId":"f7c95f85-0bfb-4e2b-8604-6c47afc07703","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727795323862,"user_tz":-330,"elapsed":454,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Keeper', 'Batsman', 'Bowler', ..., 'Batsman', 'Bowler',\n","       'Keeper-Batsman'], dtype='<U14')"]},"metadata":{},"execution_count":39}],"source":["skills = np.array(['Keeper', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Bowler', 'Bowler', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Keeper', 'Keeper', 'Keeper', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Keeper', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Bowler', 'Bowler', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper', 'Batsman', 'Keeper', 'Bowler', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Bowler', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Batsman', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Bowler', 'Bowler', 'Bowler', 'Batsman', 'Keeper', 'Bowler', 'Bowler', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Batsman', 'Bowler', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper', 'Keeper', 'Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Batsman', 'Bowler', 'Keeper', 'Keeper', 'Batsman', 'Bowler', 'Bowler', 'Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Bowler', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Batsman', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Batsman', 'Batsman', 'Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Keeper', 'Bowler', 'Keeper', 'Bowler', 'Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Batsman', 'Keeper', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Batsman', 'Bowler', 'Keeper', 'Bowler', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Bowler', 'Bowler', 'Bowler', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Batsman', 'Bowler', 'Keeper', 'Bowler', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Batsman', 'Batsman', 'Keeper', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Bowler', 'Batsman', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Bowler', 'Bowler', 'Keeper', 'Bowler', 'Keeper', 'Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Bowler', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Batsman', 'Batsman', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Batsman', 'Batsman', 'Bowler', 'Batsman', 'Keeper', 'Bowler', 'Bowler', 'Keeper', 'Bowler', 'Bowler', 'Keeper', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Keeper-Batsman', 'Keeper-Batsman', 'Bowler', 'Bowler', 'Bowler', 'Batsman', 'Bowler', 'Keeper-Batsman', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper', 'Keeper-Batsman', 'Batsman', 'Bowler', 'Keeper-Batsman'])\n","skills"]},{"cell_type":"markdown","metadata":{"id":"PopifcAxd5XH"},"source":["##### Fetch Heights of the Batsmen"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G5Cogfwwd5XH"},"outputs":[],"source":["batsmen = players_converted[skills == 'Batsman']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I6M6cNuPd5XI","outputId":"437692a6-2e6a-4399-c767-e64e3eca9ae9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727795327979,"user_tz":-330,"elapsed":9,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(323, 2)"]},"metadata":{},"execution_count":41}],"source":["batsmen.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bz0xnuD5d5XI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727795335634,"user_tz":-330,"elapsed":712,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"92b09428-e090-486c-a6e7-3d308a296b17"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.8796, 1.8542, 1.7526, 1.8034, 1.9304, 1.8542, 1.8542, 1.778 ,\n","       2.0066, 1.8288, 1.8034, 1.905 , 1.9558, 1.8542, 1.905 , 1.8796,\n","       1.8034, 1.8542, 1.8796, 1.9304, 1.905 , 1.9304, 1.8288, 1.905 ,\n","       1.8542, 1.778 , 1.778 , 1.8034, 1.8288, 1.905 , 1.9812, 1.8034,\n","       1.8542, 1.8542, 1.9304, 1.8796, 1.8542, 1.8288, 1.8542, 1.8288,\n","       1.8542, 1.8288, 1.905 , 1.905 , 1.8288, 1.8288, 1.9558, 1.9558,\n","       1.905 , 1.9304, 2.032 , 1.905 , 1.8542, 1.8796, 1.905 , 1.8034,\n","       1.9304, 1.8796, 1.8542, 1.8542, 1.8034, 1.8542, 1.8542, 1.8288,\n","       1.905 , 1.778 , 1.8034, 1.8288, 1.905 , 1.8542, 1.9304, 1.905 ,\n","       1.9304, 1.8288, 1.8542, 1.905 , 1.8796, 1.8034, 1.9558, 1.9812,\n","       1.905 , 1.905 , 1.9304, 1.8288, 1.8288, 1.8542, 1.8796, 1.8796,\n","       1.905 , 1.8542, 1.8796, 1.9558, 1.9812, 1.9812, 1.8796, 1.9812,\n","       1.8796, 1.8288, 1.9304, 1.8542, 1.8542, 1.9558, 1.9558, 1.8034,\n","       1.9812, 1.778 , 1.8796, 1.8288, 1.8542, 1.905 , 1.8796, 1.8542,\n","       1.8796, 1.8542, 1.9812, 1.9304, 1.8542, 1.905 , 1.9812, 1.9558,\n","       1.8288, 1.7526, 1.8796, 1.778 , 1.8796, 1.9304, 1.905 , 1.8542,\n","       1.8542, 1.8542, 1.8796, 1.8796, 1.778 , 1.8796, 1.905 , 1.8288,\n","       1.9558, 1.8542, 1.9304, 1.8542, 1.905 , 1.8796, 1.8542, 1.8034,\n","       1.9304, 1.905 , 1.8542, 1.8542, 1.9304, 1.8542, 1.905 , 1.905 ,\n","       1.9558, 1.8796, 1.8034, 1.8796, 1.8796, 1.905 , 1.8288, 1.8542,\n","       1.9304, 1.9558, 1.8542, 1.778 , 1.8542, 1.8796, 1.9558, 1.905 ,\n","       1.8542, 1.9558, 1.9558, 1.8796, 1.8796, 1.905 , 1.8034, 1.778 ,\n","       2.0066, 1.8796, 1.8288, 2.0828, 1.8796, 1.8796, 1.8288, 1.9304,\n","       1.8542, 1.8288, 1.8288, 1.778 , 1.8034, 1.905 , 1.9304, 1.9304,\n","       1.9812, 1.905 , 1.9304, 1.8288, 1.8542, 1.778 , 1.8796, 1.8542,\n","       1.8542, 1.905 , 1.778 , 2.0066, 1.905 , 1.905 , 1.8542, 1.778 ,\n","       1.8034, 1.905 , 1.8288, 1.8288, 1.9304, 1.905 , 1.7526, 1.8288,\n","       1.9304, 1.8034, 1.905 , 1.9558, 1.778 , 1.8288, 1.8034, 1.8796,\n","       1.9304, 1.8288, 1.8796, 1.8288, 1.8034, 1.778 , 1.8288, 1.8796,\n","       1.8796, 1.905 , 1.8796, 1.8034, 1.8034, 1.9304, 1.8034, 1.8796,\n","       1.8288, 1.9304, 1.9812, 1.8288, 1.9304, 1.778 , 1.7272, 1.8034,\n","       1.9558, 1.7526, 1.905 , 1.905 , 1.9304, 1.8288, 1.9558, 1.778 ,\n","       2.0066, 1.8796, 1.7272, 1.905 , 1.8288, 1.8288, 1.8542, 1.8796,\n","       1.8288, 1.905 , 1.8288, 1.8542, 1.9304, 1.8796, 1.905 , 1.9304,\n","       1.8796, 1.8288, 1.8542, 1.8288, 1.8542, 1.8288, 1.8542, 1.778 ,\n","       1.8288, 1.905 , 1.8542, 1.9304, 1.9558, 1.9558, 1.905 , 1.905 ,\n","       1.9304, 1.8288, 1.8542, 1.8796, 1.8288, 1.8796, 1.8796, 1.905 ,\n","       1.8034, 1.9304, 1.8542, 1.7272, 1.8288, 1.7526, 1.8542, 1.905 ,\n","       1.8796, 1.8796, 1.8796, 1.8542, 1.8796, 1.905 , 1.8796, 1.8542,\n","       1.9304, 1.9812, 1.8542, 1.905 , 1.7018, 1.778 , 1.778 , 2.0066,\n","       1.9304, 1.8288, 1.905 ])"]},"metadata":{},"execution_count":42}],"source":["batsmen[:, 0]"]},{"cell_type":"code","source":["# Read the variable from STDIN\n","n = int(input())\n","\n","import numpy as np\n","\n","# Create an 'n*n' array of all zeros\n","a = np.zeros((n,n),dtype=int)\n","\n","# Fill the array with zeroes from second index (i.e. index 1) to second last index.\n","# Do this for both row indices and column indices\n","for i in range(n):\n","    for j in range(n):\n","        if i==0 or j==0 or i==n-1 or j==n-1:\n","            a[i][j]=1\n","# Print the array created\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BjgtTor5Sm3h","executionInfo":{"status":"ok","timestamp":1711721466804,"user_tz":-330,"elapsed":3191,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"2367aa95-0413-4adf-c31b-0cc15aba7f14"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["7\n","[[1 1 1 1 1 1 1]\n"," [1 0 0 0 0 0 1]\n"," [1 0 0 0 0 0 1]\n"," [1 0 0 0 0 0 1]\n"," [1 0 0 0 0 0 1]\n"," [1 0 0 0 0 0 1]\n"," [1 1 1 1 1 1 1]]\n"]}]},{"cell_type":"code","source":["i = 0\n","j = 2\n","i%j"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T98_Aknaro3-","executionInfo":{"status":"ok","timestamp":1711723700084,"user_tz":-330,"elapsed":385,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"85e14c07-2457-42e9-bf9b-e08f57c3755f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# Read the variable from STDIN\n","n = 5\n","\n","import numpy as np\n","\n","# Create an 'n*n' array of all zeros\n","a = np.zeros((n,n),dtype=int)\n","if n>2:\n","  mid = n//2\n","  a[:,mid] = 1\n","  a[mid,:] = 1\n","  print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-7EYYgFSqnz3","executionInfo":{"status":"ok","timestamp":1727795680754,"user_tz":-330,"elapsed":788,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"e36abd24-1b7a-48c3-ee2d-ca15187fb97f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 0 1 0 0]\n"," [0 0 1 0 0]\n"," [1 1 1 1 1]\n"," [0 0 1 0 0]\n"," [0 0 1 0 0]]\n"]}]},{"cell_type":"code","source":["# Read the variable from STDIN\n","n = int(input())\n","\n","import numpy as np\n","\n","# Create an 'n*n' array of all ones\n","a = np.ones((n,n),dtype=int)\n","\n","# Fill the array with zeroes from second index (i.e. index 1) to second last index.\n","# Do this for both row indices and column indices\n","for i in range(n):\n","    for j in range(n):\n","        if i!=0 and j!=0 and i!=n-1 and j!=n-1:\n","            a[i][j]=0\n","# Print the array created\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ju1KKXWkSpw7","executionInfo":{"status":"ok","timestamp":1711448858618,"user_tz":-330,"elapsed":1733,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"93a6e227-6584-4f8b-f660-12a3dbe596ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","[[1 1 1 1]\n"," [1 0 0 1]\n"," [1 0 0 1]\n"," [1 1 1 1]]\n"]}]},{"cell_type":"code","source":["b = np.array(range(1,65))\n","b1 = b.reshape(8,8)\n","print(b1)\n","print(b1[6][1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ts2BZRkLpAKS","executionInfo":{"status":"ok","timestamp":1727795992865,"user_tz":-330,"elapsed":494,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"1eb37a00-0b47-423e-e74e-ad62fea34ec3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  2  3  4  5  6  7  8]\n"," [ 9 10 11 12 13 14 15 16]\n"," [17 18 19 20 21 22 23 24]\n"," [25 26 27 28 29 30 31 32]\n"," [33 34 35 36 37 38 39 40]\n"," [41 42 43 44 45 46 47 48]\n"," [49 50 51 52 53 54 55 56]\n"," [57 58 59 60 61 62 63 64]]\n","50\n"]}]},{"cell_type":"code","source":["b = np.array(range(1, 11*12+1))\n","b1 = b.reshape(11,12)\n","print(b1)\n","print(b1[8][3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wRZBd7y_gyZM","executionInfo":{"status":"ok","timestamp":1727796048552,"user_tz":-330,"elapsed":579,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"51f54ed4-2fc4-425a-e539-e2844472008c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  1   2   3   4   5   6   7   8   9  10  11  12]\n"," [ 13  14  15  16  17  18  19  20  21  22  23  24]\n"," [ 25  26  27  28  29  30  31  32  33  34  35  36]\n"," [ 37  38  39  40  41  42  43  44  45  46  47  48]\n"," [ 49  50  51  52  53  54  55  56  57  58  59  60]\n"," [ 61  62  63  64  65  66  67  68  69  70  71  72]\n"," [ 73  74  75  76  77  78  79  80  81  82  83  84]\n"," [ 85  86  87  88  89  90  91  92  93  94  95  96]\n"," [ 97  98  99 100 101 102 103 104 105 106 107 108]\n"," [109 110 111 112 113 114 115 116 117 118 119 120]\n"," [121 122 123 124 125 126 127 128 129 130 131 132]]\n","100\n"]}]},{"cell_type":"code","source":["c = np.array([[1, 2, 3, 4, 5],[6, 7, 8, 9, 10],[11, 12, 13, 14, 15],[16, 17, 18, 19, 20]])\n","print(c)\n","print()\n","print(c[c%2==0].reshape(5,2))\n","print()\n","print(c[c%2!=0].reshape(5,2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CaAPrq9-hu8m","executionInfo":{"status":"ok","timestamp":1727796059525,"user_tz":-330,"elapsed":489,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"d568a75c-f5cb-493d-d01e-eefb7e301d57"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  2  3  4  5]\n"," [ 6  7  8  9 10]\n"," [11 12 13 14 15]\n"," [16 17 18 19 20]]\n","\n","[[ 2  4]\n"," [ 6  8]\n"," [10 12]\n"," [14 16]\n"," [18 20]]\n","\n","[[ 1  3]\n"," [ 5  7]\n"," [ 9 11]\n"," [13 15]\n"," [17 19]]\n"]}]},{"cell_type":"code","source":["a = np.array([[7, 13, 14], [18, 10, 17], [11, 12, 19]])\n","b = np.array([16, 6, 1])\n","c = np.array([[5, 8, 4, 3]])\n","d = np.vstack((a,b))\n","print(d)\n","#e = np.append(d,c.T,axis=1)\n","c = c.reshape(4,1)\n","e = np.hstack((d,c))\n","print(e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5MxEZYSPztaw","executionInfo":{"status":"ok","timestamp":1727796114654,"user_tz":-330,"elapsed":411,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"fea48dfe-2dbf-457e-86ba-01ee40584386"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 7 13 14]\n"," [18 10 17]\n"," [11 12 19]\n"," [16  6  1]]\n","[[ 7 13 14  5]\n"," [18 10 17  8]\n"," [11 12 19  4]\n"," [16  6  1  3]]\n"]}]},{"cell_type":"code","source":["a = np.array([[1, 5],[3, 7],[4, 9]])\n","print(a)\n","np.reshape(a, (3, -1))\n","np.reshape(a, (3, -1)).ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EUJwvUHK0Sz2","executionInfo":{"status":"ok","timestamp":1711721649272,"user_tz":-330,"elapsed":402,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"b5ab858f-861d-4f8b-c635-9d8f035c8c38"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 5]\n"," [3 7]\n"," [4 9]]\n"]},{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"YqOWrZ2gmNLh"},"source":["# Problem Statement: Temperature Data set\n","Recall the temperature data set that you explored and manipulated using function programming methods in Python.You are provided with data of hourly temperature readings for seven consecutive days(Mon-Sun) for a particular week in Seattle. Let's now use this data set to perform the same tasks as you did using functional programming methods."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"TcL-vKtF3GmD","executionInfo":{"status":"ok","timestamp":1727801161464,"user_tz":-330,"elapsed":417,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[],"source":["import numpy as np"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"cDOZyCPwlwHW","executionInfo":{"status":"ok","timestamp":1727801161941,"user_tz":-330,"elapsed":6,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[],"source":["# Hourly temperature data for a week in Kelvin\n","temp_list = [\n","            [281.72, 281.72, 281.71, 281.70, 281.69, 281.69, 281.68, 281.67, 281.66, 281.66, 281.65, 281.64, 281.63, 281.63, 281.62, 282.71, 285.05, 287.97, 290.61, 292.06, 293.68, 295.32, 295.18, 296.11],\n","            [295.24, 294.38, 292.28, 291.12, 289.93, 287.87, 287.14, 286.54, 286.16, 285.31, 284.30, 283.96, 283.60, 283.23, 283.50, 284.57, 285.64, 286.71, 287.42, 288.61, 289.13, 289.41, 289.18, 288.95],\n","            [288.79, 287.47, 286.01, 284.85, 283.91, 283.31, 283.07, 283.15, 282.51, 281.98, 281.49, 281.14, 280.59, 279.65, 279.15, 279.72, 282.40, 284.72, 286.03, 287.19, 288.68, 289.56, 290.05, 289.98],\n","            [289.60, 288.40, 286.38, 285.56, 284.45, 283.92, 283.25, 282.59, 281.92, 281.78, 281.63, 281.08, 280.64, 281.14, 280.08, 280.70, 282.98, 284.62, 286.61, 287.45, 289.22, 290.21, 289.94, 290.01],\n","            [289.85, 288.82, 287.60, 285.82, 284.58, 284.12, 283.63, 282.98, 282.68, 282.38, 281.77, 281.47, 281.06, 280.55, 280.65, 281.00, 283.49, 286.17, 287.58, 289.49, 292.11, 292.85, 292.69, 292.85],\n","            [292.05, 290.34, 288.05, 286.46, 285.37, 285.04, 284.38, 283.73, 283.07, 282.87, 280.77, 280.32, 280.01, 279.77, 279.54, 279.63, 282.48, 287.17, 289.47, 291.63, 293.42, 293.95, 294.78, 294.10],\n","            [293.62, 291.88, 290.03, 288.43, 287.15, 286.78, 286.32, 285.17, 283.78, 282.96, 282.93, 281.96, 282.02, 281.26, 280.25, 281.01, 283.15, 286.49, 289.87, 291.42, 292.46, 293.35, 294.32, 294.85],\n","             ]"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"3HM7RnyfZCfi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801174317,"user_tz":-330,"elapsed":653,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"e30b00b1-91ad-469b-94b0-edc34f32af61"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[281.72 281.72 281.71 281.7  281.69 281.69 281.68 281.67 281.66 281.66\n","  281.65 281.64 281.63 281.63 281.62 282.71 285.05 287.97 290.61 292.06\n","  293.68 295.32 295.18 296.11]\n"," [295.24 294.38 292.28 291.12 289.93 287.87 287.14 286.54 286.16 285.31\n","  284.3  283.96 283.6  283.23 283.5  284.57 285.64 286.71 287.42 288.61\n","  289.13 289.41 289.18 288.95]\n"," [288.79 287.47 286.01 284.85 283.91 283.31 283.07 283.15 282.51 281.98\n","  281.49 281.14 280.59 279.65 279.15 279.72 282.4  284.72 286.03 287.19\n","  288.68 289.56 290.05 289.98]\n"," [289.6  288.4  286.38 285.56 284.45 283.92 283.25 282.59 281.92 281.78\n","  281.63 281.08 280.64 281.14 280.08 280.7  282.98 284.62 286.61 287.45\n","  289.22 290.21 289.94 290.01]\n"," [289.85 288.82 287.6  285.82 284.58 284.12 283.63 282.98 282.68 282.38\n","  281.77 281.47 281.06 280.55 280.65 281.   283.49 286.17 287.58 289.49\n","  292.11 292.85 292.69 292.85]\n"," [292.05 290.34 288.05 286.46 285.37 285.04 284.38 283.73 283.07 282.87\n","  280.77 280.32 280.01 279.77 279.54 279.63 282.48 287.17 289.47 291.63\n","  293.42 293.95 294.78 294.1 ]\n"," [293.62 291.88 290.03 288.43 287.15 286.78 286.32 285.17 283.78 282.96\n","  282.93 281.96 282.02 281.26 280.25 281.01 283.15 286.49 289.87 291.42\n","  292.46 293.35 294.32 294.85]]\n"]}],"source":["temp_k = np.array(temp_list)\n","print(temp_k)"]},{"cell_type":"code","source":["temp_c = temp_k - 273.15        # Converting temperature data from Kelvin to Celsius\n","print(temp_c)"],"metadata":{"id":"RbKbmSGPD4c5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801181744,"user_tz":-330,"elapsed":413,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"45ac2b65-684b-4ea8-e3f1-45f10beb7d00"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 8.57  8.57  8.56  8.55  8.54  8.54  8.53  8.52  8.51  8.51  8.5   8.49\n","   8.48  8.48  8.47  9.56 11.9  14.82 17.46 18.91 20.53 22.17 22.03 22.96]\n"," [22.09 21.23 19.13 17.97 16.78 14.72 13.99 13.39 13.01 12.16 11.15 10.81\n","  10.45 10.08 10.35 11.42 12.49 13.56 14.27 15.46 15.98 16.26 16.03 15.8 ]\n"," [15.64 14.32 12.86 11.7  10.76 10.16  9.92 10.    9.36  8.83  8.34  7.99\n","   7.44  6.5   6.    6.57  9.25 11.57 12.88 14.04 15.53 16.41 16.9  16.83]\n"," [16.45 15.25 13.23 12.41 11.3  10.77 10.1   9.44  8.77  8.63  8.48  7.93\n","   7.49  7.99  6.93  7.55  9.83 11.47 13.46 14.3  16.07 17.06 16.79 16.86]\n"," [16.7  15.67 14.45 12.67 11.43 10.97 10.48  9.83  9.53  9.23  8.62  8.32\n","   7.91  7.4   7.5   7.85 10.34 13.02 14.43 16.34 18.96 19.7  19.54 19.7 ]\n"," [18.9  17.19 14.9  13.31 12.22 11.89 11.23 10.58  9.92  9.72  7.62  7.17\n","   6.86  6.62  6.39  6.48  9.33 14.02 16.32 18.48 20.27 20.8  21.63 20.95]\n"," [20.47 18.73 16.88 15.28 14.   13.63 13.17 12.02 10.63  9.81  9.78  8.81\n","   8.87  8.11  7.1   7.86 10.   13.34 16.72 18.27 19.31 20.2  21.17 21.7 ]]\n"]}]},{"cell_type":"code","source":["temp_f = (1.8*temp_c)+32                # Converting temperature from deg C to deg F\n","print(temp_f)"],"metadata":{"id":"x62-O3rUEMEt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801184207,"user_tz":-330,"elapsed":573,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"8d4d98d7-729f-457a-c533-c24771c66abd"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[[47.426 47.426 47.408 47.39  47.372 47.372 47.354 47.336 47.318 47.318\n","  47.3   47.282 47.264 47.264 47.246 49.208 53.42  58.676 63.428 66.038\n","  68.954 71.906 71.654 73.328]\n"," [71.762 70.214 66.434 64.346 62.204 58.496 57.182 56.102 55.418 53.888\n","  52.07  51.458 50.81  50.144 50.63  52.556 54.482 56.408 57.686 59.828\n","  60.764 61.268 60.854 60.44 ]\n"," [60.152 57.776 55.148 53.06  51.368 50.288 49.856 50.    48.848 47.894\n","  47.012 46.382 45.392 43.7   42.8   43.826 48.65  52.826 55.184 57.272\n","  59.954 61.538 62.42  62.294]\n"," [61.61  59.45  55.814 54.338 52.34  51.386 50.18  48.992 47.786 47.534\n","  47.264 46.274 45.482 46.382 44.474 45.59  49.694 52.646 56.228 57.74\n","  60.926 62.708 62.222 62.348]\n"," [62.06  60.206 58.01  54.806 52.574 51.746 50.864 49.694 49.154 48.614\n","  47.516 46.976 46.238 45.32  45.5   46.13  50.612 55.436 57.974 61.412\n","  66.128 67.46  67.172 67.46 ]\n"," [66.02  62.942 58.82  55.958 53.996 53.402 52.214 51.044 49.856 49.496\n","  45.716 44.906 44.348 43.916 43.502 43.664 48.794 57.236 61.376 65.264\n","  68.486 69.44  70.934 69.71 ]\n"," [68.846 65.714 62.384 59.504 57.2   56.534 55.706 53.636 51.134 49.658\n","  49.604 47.858 47.966 46.598 44.78  46.148 50.    56.012 62.096 64.886\n","  66.758 68.36  70.106 71.06 ]]\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"id":"MKOMrVodI26y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801205128,"user_tz":-330,"elapsed":408,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"49934986-0e1f-49fb-894c-5b827c357df3"},"outputs":[{"output_type":"stream","name":"stdout","text":["The temperature on Day 4 at Hour 2 is 15.25 deg C\n"]}],"source":["#The temperature on Day 4 at Hour 2 is 15.25 deg C\n","print('The temperature on Day 4 at Hour 2 is',temp_c[3][1],'deg C')"]},{"cell_type":"code","source":["temp_c > 22"],"metadata":{"id":"yJeitx3GI8N5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801209202,"user_tz":-330,"elapsed":385,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"e3b8db06-43fe-4ad9-d97b-be16b6019307"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False,  True,  True,  True],\n","       [ True, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False, False, False, False,\n","        False, False, False, False, False, False]])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","execution_count":9,"metadata":{"id":"qCr8EV9vDUNE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801214435,"user_tz":-330,"elapsed":466,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"34b68e59-cb6e-4e54-f058-363293d22dc3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([22.17, 22.03, 22.96, 22.09])"]},"metadata":{},"execution_count":9}],"source":["temp_c[temp_c > 22]"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"dC-PCQWLKDRc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801222656,"user_tz":-330,"elapsed":391,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"d05ba374-cf5f-4844-f807-822d39d16256"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of hours the temperature was above 22 degrees Celsius is 4\n"]}],"source":["# num_hours temp was above 22 deg C\n","print('Number of hours the temperature was above 22 degrees Celsius is',temp_c[temp_c > 22].size)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"pURVdMfmNHBB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801233071,"user_tz":-330,"elapsed":375,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"3dfe6cb3-9134-4705-a197-85979502b4b0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of hours the temperature was above 22 degrees Celsius is 4\n"]}],"source":["# num_hours temp was above X deg C, where X is a function input\n","def aboveX(n):\n","  return temp_c[temp_c > n].size\n","\n","print('Number of hours the temperature was above 22 degrees Celsius is',aboveX(22))  #where X=22"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"sscbESoSNQS8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801239204,"user_tz":-330,"elapsed":630,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"4fcb58f3-7ef7-4938-abb1-fba518903b90"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of hours when the temperature was between 10 and 25 degrees Celsius is 105\n"]}],"source":["# num_hours temp was between 10 and 25 deg C\n","print('Number of hours when the temperature was between 10 and 25 degrees Celsius is',temp_c[(10 < temp_c) & (temp_c < 25)].size)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"Jq1BZUN7Pl7X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801242364,"user_tz":-330,"elapsed":402,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"7d5af5bd-7a80-4b53-80d5-7d647f7d831e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of hours when the temperature was between 10 and 25 degrees Celsius is 105\n"]}],"source":["# num_hours temp was between X and Y deg C (X,Y = func input)\n","def aboveXY(m,n):\n","  return temp_c[(m < temp_c) & (temp_c < n)].size\n","\n","print('Number of hours when the temperature was between 10 and 25 degrees Celsius is',aboveXY(10,25))  #where X=10,Y=25"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"al3--ozFP8RR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801267384,"user_tz":-330,"elapsed":397,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"6d779d75-1a56-4b99-d1df-355e07013236"},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}],"source":["# Was the temp ever recorded as exactly 11 deg C for any hour on day 3?\n","# Remember to round temperature values before comparing\n","t = 11 in np.round(temp_c[2,:])\n","print(t)"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"8Wo_sfYtQbUR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727801269139,"user_tz":-330,"elapsed":393,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"055609d5-94b4-4bdf-84cb-2062be151a8c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":15}],"source":["# Was the temp ever recorded as exactly X deg C for any hour on day Y?\n","# Remember to round temperature values before comparing\n","# Create a function\n","def xypresent(x,y):\n","  return x in np.round(temp_c[y,:])\n","\n","xypresent(13,2)"]},{"cell_type":"markdown","metadata":{"id":"IjzHRaufKHkJ"},"source":["Highest temp on a day"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pLymYKZpJkqC","outputId":"01d9829b-6a68-4152-bd5a-15f416fdd694","executionInfo":{"status":"ok","timestamp":1727801276700,"user_tz":-330,"elapsed":9,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum temperature for day 0 is 22.960000000000036 degree celsius at hour 23\n","Maximum temperature for day 1 is 22.090000000000032 degree celsius at hour 0\n","Maximum temperature for day 2 is 16.900000000000034 degree celsius at hour 22\n","Maximum temperature for day 3 is 17.060000000000002 degree celsius at hour 21\n","Maximum temperature for day 4 is 19.700000000000045 degree celsius at hour 21\n","Maximum temperature for day 5 is 21.629999999999995 degree celsius at hour 22\n","Maximum temperature for day 6 is 21.700000000000045 degree celsius at hour 23\n"]}],"source":["for x in range(0,7):\n","  print('Maximum temperature for day {0} is {1} degree celsius at hour {2}'.format(x,np.max(temp_c[x,:]),np.argmax(temp_c[x,:])))"]},{"cell_type":"markdown","metadata":{"id":"53h4YGY1iqVN"},"source":["**Example 2**\n","\n","This practice is continued from the Cricket example that you have seen as a part of this sesion. Now, you are provided with 2 lists that contain the data of the player. They are asked to play one match each and the data is collected.\n","\n","The first list contains the player ID and the second list consists of tuples where first element is the runs scored, second is the wickets taken and third is the number of catches taken.\n","\n","As a part of this exercise, solve the questions that are provided below."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SbClmk1tiqVP"},"outputs":[],"source":["player = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502]\n","score = [(46, 1, 0), (19, 0, 1), (35, 1, 0), (25, 2, 1), (0, 3, 0), (20, 0, 2), (34, 2, 0), (39, 1, 0), (6, 3, 0), (0, 1, 0), (69, 0, 0), (9, 2, 0), (18, 0, 2), (46, 0, 1), (11, 0, 2), (25, 1, 0), (34, 0, 3), (47, 1, 0), (2, 3, 0), (8, 0, 2), (2, 0, 0), (27, 2, 0), (42, 1, 0), (35, 1, 0), (34, 1, 0), (61, 0, 0), (62, 0, 0), (43, 0, 0), (1, 2, 0), (32, 1, 2), (35, 0, 1), (39, 0, 3), (37, 1, 0), (39, 0, 0), (82, 0, 3), (74, 1, 0), (33, 2, 3), (71, 1, 0), (7, 2, 0), (42, 1, 0), (78, 0, 0), (27, 1, 0), (50, 0, 1), (6, 4, 2), (59, 0, 1), (4, 4, 0), (8, 2, 2), (15, 1, 1), (33, 1, 0), (68, 1, 0), (34, 1, 2), (17, 2, 0), (83, 1, 0), (31, 2, 1), (17, 2, 3), (91, 0, 0), (67, 0, 0), (76, 0, 0), (22, 2, 0), (31, 0, 1), (27, 0, 1), (26, 2, 0), (9, 3, 1), (43, 1, 1), (6, 1, 2), (52, 0, 0), (48, 0, 0), (26, 0, 1), (50, 0, 0), (46, 0, 2), (47, 1, 0), (21, 3, 3), (10, 2, 0), (33, 0, 1), (48, 1, 0), (7, 1, 1), (42, 0, 1), (1, 2, 2), (82, 0, 1), (24, 0, 0), (28, 1, 0), (0, 0, 0), (14, 0, 3), (80, 0, 3), (38, 0, 0), (16, 0, 3), (14, 2, 0), (26, 1, 0), (17, 2, 2), (24, 2, 0), (42, 0, 0), (42, 0, 1), (47, 1, 0), (8, 1, 1), (7, 2, 1), (16, 3, 1), (46, 0, 0), (61, 0, 0), (67, 0, 1), (36, 0, 0), (15, 1, 0), (48, 0, 1), (75, 1, 1), (13, 0, 0), (32, 0, 1), (72, 1, 2), (45, 1, 0), (85, 0, 1), (5, 0, 0), (88, 0, 0), (12, 2, 0), (60, 1, 0), (42, 0, 3), (15, 3, 0), (12, 0, 1), (46, 0, 1), (1, 1, 2), (35, 2, 0), (49, 0, 1), (24, 0, 0), (33, 0, 0), (18, 1, 2), (39, 0, 1), (26, 2, 1), (35, 0, 0), (42, 0, 0), (15, 3, 2), (19, 1, 0), (14, 2, 0), (32, 0, 2), (19, 1, 0), (44, 1, 1), (48, 0, 0), (84, 0, 0), (17, 3, 0), (14, 2, 1), (14, 0, 1), (37, 0, 1), (22, 2, 0), (26, 0, 0), (26, 1, 0), (15, 2, 0), (32, 1, 1), (41, 0, 0), (10, 4, 1), (89, 0, 0), (30, 2, 0), (10, 1, 1), (19, 1, 0), (32, 1, 0), (77, 0, 0), (78, 1, 0), (63, 0, 0), (79, 0, 2), (35, 2, 1), (87, 0, 0), (28, 2, 0), (11, 2, 1), (5, 1, 1), (40, 0, 2), (80, 0, 1), (72, 1, 2), (21, 1, 0), (2, 1, 3), (22, 0, 0), (15, 2, 2), (11, 4, 0), (28, 0, 0), (85, 1, 1), (39, 0, 1), (10, 0, 1), (79, 0, 0), (42, 0, 1), (21, 1, 1), (15, 0, 0), (71, 0, 1), (20, 0, 0), (29, 1, 0), (5, 0, 1), (11, 2, 0), (7, 3, 1), (38, 0, 0), (49, 0, 3), (10, 3, 3), (80, 1, 0), (54, 0, 0), (18, 2, 2), (47, 0, 0), (32, 1, 3), (69, 0, 0), (48, 0, 2), (13, 1, 1), (89, 1, 0), (22, 2, 0), (0, 4, 0), (27, 0, 0), (19, 3, 0), (0, 2, 3), (11, 1, 2), (48, 1, 2), (15, 3, 0), (34, 1, 0), (41, 0, 2), (4, 3, 0), (17, 0, 0), (38, 0, 0), (32, 1, 0), (39, 1, 1), (29, 1, 0), (38, 0, 1), (70, 0, 1), (21, 3, 0), (5, 3, 0), (19, 2, 0), (0, 1, 0), (29, 2, 2), (21, 1, 0), (61, 0, 2), (90, 0, 0), (12, 2, 1), (45, 0, 2), (45, 0, 2), (51, 0, 3), (9, 1, 0), (50, 0, 1), (28, 0, 0), (41, 0, 0), (2, 4, 0), (79, 1, 1), (47, 1, 1), (30, 1, 0), (13, 3, 2), (31, 0, 1), (46, 1, 0), (44, 1, 2), (34, 0, 1), (28, 1, 0), (10, 1, 0), (5, 4, 1), (78, 1, 0), (31, 0, 0), (44, 0, 0), (46, 1, 2), (5, 0, 0), (25, 2, 0), (62, 0, 0), (33, 1, 0), (10, 3, 0), (65, 0, 2), (30, 1, 3), (7, 1, 0), (37, 1, 0), (41, 0, 0), (24, 0, 0), (70, 1, 0), (4, 1, 2), (20, 2, 2), (82, 0, 1), (1, 0, 0), (38, 1, 1), (64, 1, 0), (32, 1, 1), (17, 2, 2), (17, 2, 1), (86, 0, 2), (7, 3, 0), (4, 0, 1), (72, 0, 0), (1, 1, 2), (35, 1, 1), (43, 0, 2), (48, 0, 0), (20, 1, 1), (40, 1, 0), (69, 0, 1), (52, 1, 1), (78, 0, 2), (0, 4, 0), (19, 2, 2), (25, 2, 0), (44, 1, 3), (43, 1, 3), (37, 1, 1), (23, 2, 0), (60, 1, 0), (47, 0, 0), (27, 2, 2), (16, 2, 0), (8, 4, 0), (39, 1, 0), (1, 2, 2), (10, 2, 0), (25, 0, 2), (11, 2, 0), (9, 2, 0), (58, 1, 1), (31, 1, 0), (49, 0, 1), (35, 2, 0), (48, 1, 1), (5, 1, 2), (24, 1, 0), (22, 3, 1), (31, 2, 0), (50, 1, 2), (18, 1, 0), (44, 1, 0), (1, 1, 2), (43, 1, 1), (13, 0, 0), (82, 0, 0), (1, 0, 2), (79, 1, 1), (82, 1, 0), (65, 0, 0), (42, 1, 0), (34, 0, 1), (0, 2, 2), (8, 1, 1), (37, 0, 0), (40, 1, 0), (44, 1, 0), (11, 1, 0), (37, 3, 0), (10, 3, 1), (3, 2, 0), (0, 1, 0), (41, 1, 1), (14, 1, 0), (5, 1, 0), (76, 1, 1), (4, 2, 1), (28, 2, 0), (11, 0, 1), (39, 1, 0), (13, 2, 0), (44, 2, 0), (74, 0, 2), (12, 1, 1), (24, 2, 1), (42, 0, 0), (37, 0, 2), (40, 1, 0), (30, 2, 0), (11, 3, 0), (5, 2, 0), (13, 1, 1), (67, 0, 2), (46, 1, 1), (26, 2, 1), (81, 0, 0), (68, 1, 2), (69, 0, 2), (89, 0, 1), (71, 0, 0), (20, 2, 2), (7, 2, 0), (76, 0, 2), (14, 2, 0), (65, 0, 0), (37, 1, 2), (15, 2, 0), (25, 1, 0), (22, 3, 0), (37, 0, 0), (76, 0, 3), (33, 0, 0), (23, 2, 0), (62, 0, 0), (7, 0, 0), (86, 0, 0), (40, 1, 1), (32, 2, 2), (21, 0, 1), (41, 1, 0), (79, 0, 2), (25, 2, 0), (76, 0, 1), (62, 1, 1), (24, 0, 2), (64, 0, 1), (34, 0, 0), (34, 2, 1), (41, 1, 1), (27, 2, 1), (36, 1, 0), (17, 1, 0), (19, 1, 0), (80, 0, 0), (78, 0, 0), (18, 2, 1), (19, 2, 2), (28, 0, 1), (39, 0, 0), (11, 2, 1), (4, 2, 0), (27, 2, 0), (67, 1, 0), (46, 0, 0), (49, 0, 0), (44, 1, 0), (19, 1, 0), (43, 1, 0), (39, 0, 0), (30, 2, 1), (34, 1, 0), (42, 1, 0), (55, 1, 0), (55, 0, 1), (72, 1, 1), (48, 1, 0), (33, 0, 0), (7, 1, 0), (21, 1, 2), (33, 2, 1), (4, 1, 2), (89, 0, 0), (2, 1, 0), (34, 1, 0), (23, 1, 2), (28, 2, 0), (85, 0, 1), (76, 0, 1), (48, 0, 0), (27, 2, 0), (44, 1, 2), (45, 0, 0), (42, 0, 0), (20, 2, 0), (64, 1, 0), (63, 0, 0), (23, 2, 1), (81, 0, 1), (54, 0, 0), (54, 1, 0), (64, 0, 2), (38, 1, 0), (59, 0, 1), (30, 0, 0), (82, 0, 0), (13, 2, 0), (80, 0, 0), (74, 0, 2), (44, 1, 0), (62, 0, 0), (6, 3, 0), (89, 0, 0), (23, 2, 0), (10, 3, 1), (4, 0, 0), (2, 2, 0), (86, 0, 0), (46, 1, 1), (39, 0, 2), (49, 0, 1), (47, 1, 0), (1, 2, 0), (20, 2, 0), (4, 1, 2), (29, 0, 1), (52, 0, 0), (45, 0, 0), (22, 1, 0), (57, 0, 2), (20, 0, 0), (7, 1, 3), (19, 2, 1), (24, 1, 1), (13, 3, 1), (16, 1, 0), (4, 2, 2), (33, 2, 2), (56, 0, 2), (77, 1, 1), (35, 2, 1), (89, 1, 2), (8, 3, 1), (30, 1, 1), (2, 4, 0), (16, 2, 1), (35, 0, 0), (15, 1, 2), (56, 0, 2), (3, 4, 0), (83, 0, 1), (28, 2, 3), (25, 1, 0), (41, 0, 0), (69, 0, 0), (49, 0, 0), (3, 0, 0), (74, 0, 0), (73, 1, 1), (11, 2, 0), (3, 4, 0), (1, 3, 0), (49, 0, 0), (79, 0, 0), (25, 0, 0), (85, 0, 1), (39, 0, 0), (5, 1, 1), (30, 2, 0), (3, 0, 0), (42, 0, 2), (19, 2, 1), (37, 1, 0), (48, 1, 0), (10, 2, 0), (23, 2, 3), (47, 0, 0), (32, 0, 2), (30, 1, 1), (23, 2, 1), (47, 1, 0), (16, 2, 0), (0, 2, 1), (65, 0, 3), (8, 2, 0), (27, 1, 2), (27, 1, 1), (25, 2, 0), (28, 1, 2), (47, 0, 0), (11, 0, 0), (15, 2, 1), (49, 0, 1), (20, 2, 1), (18, 2, 0), (45, 0, 2), (21, 0, 3), (27, 2, 0), (45, 1, 2), (26, 2, 1), (66, 1, 3), (43, 1, 2), (67, 1, 1), (28, 0, 0), (77, 1, 1), (42, 0, 0), (11, 0, 2), (25, 1, 1), (14, 2, 1), (25, 1, 0), (23, 1, 0), (3, 0, 0), (71, 1, 1), (94, 0, 0), (52, 1, 0), (33, 1, 0), (8, 2, 0), (44, 0, 1), (40, 0, 0), (5, 3, 0), (12, 2, 0), (26, 0, 0), (23, 3, 1), (8, 1, 0), (51, 1, 0), (29, 1, 2), (1, 4, 2), (77, 1, 1), (0, 0, 0), (33, 0, 2), (89, 1, 3), (22, 0, 2), (55, 0, 2), (30, 0, 1), (28, 0, 3), (68, 1, 2), (48, 0, 0), (30, 1, 2), (21, 1, 1), (32, 2, 1), (7, 2, 0), (45, 0, 2), (10, 4, 0), (46, 1, 0), (44, 1, 0), (2, 3, 1), (27, 1, 0), (55, 1, 1), (39, 0, 0), (19, 0, 2), (27, 1, 1), (78, 0, 0), (80, 0, 0), (22, 2, 2), (27, 2, 0), (53, 0, 3), (42, 0, 2), (41, 1, 0), (4, 3, 0), (29, 0, 1), (59, 0, 1), (3, 0, 2), (7, 2, 1), (13, 1, 1), (10, 4, 0), (17, 3, 0), (1, 4, 0), (26, 1, 2), (87, 0, 0), (23, 0, 1), (45, 0, 0), (26, 2, 0), (26, 1, 0), (54, 0, 0), (43, 0, 0), (25, 0, 0), (16, 1, 1), (21, 2, 2), (40, 0, 1), (81, 0, 0), (16, 1, 1), (19, 2, 1), (83, 0, 0), (4, 0, 0), (19, 1, 0), (21, 1, 0), (7, 1, 0), (44, 0, 1), (8, 2, 0), (40, 0, 0), (47, 0, 0), (17, 2, 0), (20, 0, 2), (32, 2, 1), (10, 1, 2), (19, 1, 0), (14, 0, 3), (23, 0, 0), (66, 1, 1), (73, 1, 2), (48, 1, 0), (62, 1, 1), (9, 1, 0), (22, 0, 0), (87, 0, 0), (15, 2, 0), (21, 2, 0), (48, 1, 0), (11, 0, 0), (17, 2, 0), (3, 4, 1), (19, 0, 0), (62, 1, 2), (35, 0, 0), (8, 3, 0), (16, 2, 0), (5, 0, 0), (35, 0, 0), (2, 3, 0), (9, 3, 2), (34, 0, 0), (10, 1, 0), (17, 2, 0), (14, 1, 0), (11, 2, 1), (6, 2, 2), (23, 0, 0), (22, 3, 2), (12, 2, 0), (19, 0, 1), (68, 0, 0), (22, 2, 1), (40, 1, 0), (29, 2, 2), (17, 2, 0), (40, 1, 1), (26, 1, 0), (38, 1, 1), (2, 2, 2), (9, 2, 2), (34, 0, 1), (56, 0, 0), (20, 3, 0), (2, 0, 0), (46, 0, 2), (38, 0, 0), (38, 1, 0), (29, 0, 0), (25, 0, 1), (79, 1, 1), (0, 4, 1), (72, 1, 0), (1, 0, 0), (37, 0, 0), (25, 1, 0), (47, 1, 1), (5, 1, 1), (29, 2, 2), (14, 2, 2), (26, 2, 0), (47, 1, 1), (21, 1, 1), (87, 0, 0), (31, 1, 0), (19, 1, 0), (25, 1, 1), (34, 1, 0), (12, 1, 1), (42, 1, 0), (7, 0, 2), (8, 2, 0), (89, 0, 3), (79, 0, 0), (14, 2, 0), (38, 0, 0), (42, 1, 0), (26, 2, 1), (45, 0, 0), (16, 1, 1), (60, 0, 0), (8, 1, 0), (4, 1, 0), (29, 1, 2), (1, 2, 0), (71, 1, 0), (60, 0, 1), (82, 0, 0), (39, 1, 1), (20, 2, 1), (29, 1, 2), (82, 1, 0), (34, 1, 3), (44, 1, 1), (24, 0, 0), (5, 0, 0), (0, 2, 1), (24, 1, 1), (7, 0, 2), (28, 2, 0), (46, 0, 0), (9, 0, 1), (45, 1, 1), (16, 0, 0), (12, 3, 1), (80, 0, 1), (19, 2, 1), (21, 2, 1), (43, 0, 1), (43, 0, 2), (83, 0, 1), (3, 2, 0), (39, 1, 1), (34, 1, 2), (7, 4, 1), (29, 0, 3), (74, 0, 1), (65, 0, 1), (37, 1, 3), (49, 0, 0), (38, 1, 2), (25, 1, 0), (25, 1, 0), (35, 2, 0), (34, 2, 0), (52, 0, 2), (19, 3, 0), (45, 1, 1), (21, 1, 0), (23, 2, 0), (17, 1, 0), (13, 1, 1), (24, 1, 0), (69, 1, 0), (0, 2, 0), (15, 0, 1), (49, 0, 1), (40, 1, 0), (1, 0, 0), (4, 4, 0), (16, 1, 0), (2, 4, 2), (6, 4, 1), (61, 0, 2), (27, 2, 0), (23, 2, 2), (44, 0, 2), (32, 1, 2), (1, 4, 0), (65, 0, 0), (20, 2, 0), (23, 0, 0), (28, 2, 0), (47, 1, 1), (36, 0, 0), (2, 0, 0), (48, 1, 3), (14, 1, 1), (21, 2, 0), (35, 0, 0), (28, 0, 0), (35, 2, 2), (11, 3, 1), (17, 0, 1), (25, 1, 0), (13, 0, 3), (0, 3, 2), (19, 2, 0), (43, 1, 0), (42, 0, 1), (58, 0, 1), (40, 1, 2), (37, 1, 1), (57, 0, 2), (27, 1, 0), (33, 1, 1), (22, 0, 0), (37, 0, 0), (39, 0, 2), (21, 1, 0), (49, 0, 0), (78, 0, 0), (77, 0, 0), (29, 0, 0), (2, 2, 0), (40, 0, 2), (1, 1, 1), (15, 3, 0), (69, 1, 1), (24, 0, 3), (29, 1, 1), (77, 0, 0), (30, 2, 1), (31, 0, 0), (45, 0, 0), (1, 0, 0), (40, 0, 0), (1, 0, 1), (35, 0, 0), (56, 1, 2), (88, 0, 0), (29, 2, 0), (34, 2, 1), (24, 0, 1), (47, 1, 2), (71, 0, 1), (11, 0, 1), (22, 2, 0), (9, 0, 0), (2, 0, 1), (15, 3, 1), (58, 0, 0), (16, 0, 0), (46, 1, 0), (11, 0, 2), (88, 0, 2), (20, 0, 1), (47, 1, 0), (19, 2, 1), (24, 1, 0), (31, 0, 2), (0, 4, 0), (46, 0, 2), (2, 3, 1), (33, 2, 0), (11, 4, 0), (42, 1, 1), (35, 2, 0), (23, 1, 1), (47, 0, 1), (75, 0, 3), (30, 2, 0), (12, 0, 2), (11, 1, 1), (32, 2, 0), (7, 3, 1), (41, 1, 1), (3, 1, 0), (36, 0, 0), (17, 3, 0), (16, 1, 0), (26, 1, 0), (8, 2, 0), (7, 2, 0), (19, 0, 1), (9, 2, 2), (22, 2, 0), (5, 0, 0), (15, 2, 2), (45, 0, 2), (39, 0, 0), (2, 3, 0), (43, 0, 0), (44, 0, 3), (20, 2, 0), (32, 2, 1), (43, 0, 0), (80, 1, 0), (47, 0, 1), (62, 0, 1), (0, 1, 0), (20, 0, 1), (28, 2, 0), (27, 1, 0), (24, 2, 0), (77, 1, 1), (23, 1, 3), (49, 1, 1), (47, 0, 2), (82, 0, 0), (72, 0, 2), (9, 0, 0), (52, 1, 0), (50, 3, 1), (15, 2, 0), (20, 3, 1), (11, 1, 0), (48, 0, 0), (0, 2, 1), (14, 2, 1), (20, 0, 2), (20, 2, 2), (70, 0, 0), (77, 0, 0), (89, 0, 0), (16, 2, 1), (30, 1, 1), (6, 1, 1), (26, 2, 1), (46, 0, 0), (48, 1, 1), (20, 2, 2), (13, 1, 1), (13, 1, 2), (6, 4, 2), (38, 1, 1), (5, 2, 0), (3, 3, 0), (32, 2, 0), (22, 3, 0), (71, 0, 0), (33, 0, 2), (48, 0, 0), (35, 0, 0), (32, 1, 0), (4, 3, 0), (37, 0, 0), (30, 1, 0), (78, 0, 0), (49, 0, 1), (0, 0, 1), (24, 2, 1), (48, 1, 1), (35, 0, 1), (6, 2, 0), (17, 0, 0), (42, 0, 0), (45, 0, 1), (70, 0, 0), (30, 0, 0), (42, 1, 0), (43, 0, 0), (46, 0, 1), (24, 1, 1), (3, 1, 0), (29, 1, 1), (14, 2, 0), (41, 0, 2), (80, 0, 1), (31, 2, 0), (20, 2, 0), (29, 0, 0), (4, 1, 2), (39, 1, 0), (17, 1, 0), (28, 2, 1), (83, 0, 1), (12, 2, 1), (27, 2, 0), (70, 0, 1), (28, 0, 1), (5, 2, 0), (45, 1, 3), (12, 1, 2), (40, 0, 1), (54, 2, 1), (0, 3, 0), (7, 1, 1), (49, 0, 0), (8, 3, 1), (23, 3, 1), (1, 2, 0), (54, 0, 2), (39, 0, 0), (4, 3, 1), (38, 1, 1), (23, 1, 0), (45, 1, 1), (23, 0, 0), (48, 1, 0), (49, 1, 0), (27, 2, 0), (45, 0, 0), (17, 0, 1), (10, 0, 0), (27, 1, 1), (37, 0, 0), (27, 0, 1), (84, 1, 3), (37, 0, 0), (43, 0, 0), (72, 0, 0), (3, 4, 0), (41, 0, 0), (24, 1, 0), (9, 1, 1), (48, 1, 2), (37, 1, 1), (27, 2, 0), (65, 1, 0), (18, 0, 1), (14, 1, 0), (28, 0, 0), (2, 3, 1), (43, 0, 1), (37, 1, 0), (34, 0, 1), (24, 0, 1), (15, 0, 2), (20, 1, 1), (41, 0, 1), (5, 0, 1), (31, 0, 2), (43, 0, 1), (1, 1, 2), (7, 2, 2), (62, 0, 0), (2, 0, 0), (24, 2, 0), (30, 0, 2), (22, 2, 0), (50, 0, 2), (11, 2, 3), (31, 2, 0), (8, 0, 2), (41, 0, 0), (42, 1, 0), (24, 1, 1), (19, 0, 2), (43, 0, 0), (81, 0, 1), (48, 1, 1), (10, 2, 0), (21, 2, 1), (35, 2, 1), (28, 1, 0), (37, 1, 0), (26, 1, 0), (9, 0, 2), (55, 0, 0), (31, 0, 0), (14, 2, 0), (32, 0, 0), (85, 0, 2), (46, 1, 0), (28, 0, 0), (52, 1, 0), (76, 0, 1), (9, 2, 0), (3, 4, 3), (39, 1, 1), (2, 4, 0), (33, 2, 0), (78, 1, 2), (58, 0, 1), (23, 3, 0), (34, 1, 1), (15, 0, 0), (48, 1, 0), (76, 1, 0), (28, 2, 0), (0, 2, 3), (33, 0, 0), (15, 2, 0), (3, 2, 0), (14, 1, 1), (29, 0, 0), (87, 0, 0), (9, 2, 1), (9, 1, 0), (44, 1, 1), (37, 1, 0), (17, 2, 1), (7, 0, 0), (9, 0, 0), (39, 0, 2), (39, 0, 0), (5, 3, 0), (45, 0, 0), (30, 0, 0), (19, 2, 0), (47, 0, 1), (32, 0, 2), (12, 3, 1), (33, 1, 1), (64, 0, 2), (45, 1, 2), (31, 2, 0), (18, 2, 0), (28, 1, 0), (39, 0, 0), (18, 2, 0), (9, 0, 0), (46, 0, 0), (11, 0, 2), (49, 0, 2), (16, 0, 0), (27, 0, 2), (47, 1, 1), (65, 0, 3), (36, 1, 0), (24, 2, 0), (41, 0, 1), (44, 1, 0), (33, 2, 0), (27, 1, 0), (14, 0, 2), (41, 0, 1), (62, 0, 0), (36, 0, 2), (21, 2, 0), (79, 0, 1), (11, 2, 0), (42, 0, 0), (4, 1, 0), (28, 2, 0), (20, 0, 1), (44, 1, 2), (36, 1, 2), (84, 0, 2), (41, 0, 1), (38, 1, 0), (34, 0, 0), (23, 2, 0), (23, 2, 0), (44, 1, 1), (2, 1, 1), (23, 1, 1), (55, 0, 2), (44, 1, 1), (43, 0, 1), (30, 2, 0), (43, 0, 0), (39, 0, 0), (82, 0, 0), (31, 1, 0), (14, 0, 0), (40, 0, 2), (35, 1, 0), (23, 0, 2), (2, 2, 0), (12, 1, 2), (77, 0, 2), (59, 0, 0), (28, 1, 0), (54, 0, 0), (41, 0, 0), (45, 1, 0), (28, 0, 1), (32, 1, 3), (27, 2, 2), (84, 1, 0), (49, 0, 3), (4, 3, 2), (44, 0, 2), (43, 0, 0), (12, 3, 1), (47, 0, 1), (40, 0, 0), (24, 1, 1), (0, 1, 2), (39, 4, 0), (17, 0, 0), (60, 0, 0), (32, 0, 1), (3, 0, 2), (6, 2, 1), (30, 0, 1), (26, 0, 1), (17, 3, 1), (58, 0, 0), (32, 0, 0), (13, 2, 1), (85, 1, 0), (34, 2, 0), (10, 1, 1), (82, 0, 0), (15, 0, 0), (78, 0, 1), (45, 0, 0), (25, 2, 3), (14, 0, 0), (40, 1, 1), (19, 1, 0), (5, 1, 1), (15, 2, 0), (9, 3, 0), (23, 2, 0), (22, 2, 0), (48, 1, 0), (0, 4, 0), (37, 1, 1), (45, 1, 0), (15, 0, 0), (42, 0, 1), (55, 0, 1), (43, 1, 1), (3, 2, 1), (32, 2, 0), (21, 2, 0), (82, 0, 0), (22, 1, 0), (79, 1, 0), (2, 4, 0), (88, 1, 1), (32, 1, 0), (32, 0, 2), (14, 2, 0), (6, 3, 2), (2, 2, 1), (49, 0, 1), (49, 0, 2), (17, 0, 2), (33, 1, 3), (23, 1, 1), (33, 0, 2), (15, 2, 0), (33, 2, 0), (34, 2, 0), (48, 1, 0), (46, 0, 0), (18, 2, 0), (28, 1, 0), (2, 2, 0), (32, 1, 0), (9, 0, 0), (70, 0, 0), (17, 2, 0), (32, 2, 2), (79, 1, 0), (78, 0, 0), (36, 0, 0), (40, 0, 1), (64, 1, 3), (25, 0, 0), (23, 3, 1), (65, 0, 3), (3, 2, 0), (21, 2, 1), (12, 1, 2), (12, 2, 0), (3, 1, 0), (34, 1, 0), (70, 1, 2), (30, 0, 0), (4, 2, 0), (23, 1, 3), (6, 4, 0), (4, 4, 0), (22, 3, 0), (9, 0, 0), (89, 0, 0), (25, 2, 1), (39, 1, 1), (46, 1, 1), (74, 1, 0), (12, 2, 0), (3, 0, 0), (24, 0, 0), (44, 0, 0), (7, 3, 3), (11, 1, 0), (27, 0, 0), (6, 4, 2), (71, 1, 1), (8, 0, 1), (33, 0, 0), (1, 2, 1), (49, 0, 2), (35, 2, 0), (39, 0, 1), (5, 2, 0), (25, 0, 0), (54, 0, 1), (35, 1, 1), (5, 1, 2), (46, 0, 0), (12, 2, 0), (25, 0, 0), (84, 0, 0), (9, 2, 3), (19, 1, 1), (24, 2, 2), (38, 0, 1), (15, 1, 2), (66, 0, 1), (14, 3, 1), (64, 0, 0), (8, 4, 0), (87, 0, 0), (2, 1, 1), (47, 1, 0), (33, 2, 2), (35, 0, 1), (45, 1, 3), (31, 1, 0), (46, 0, 0), (2, 3, 0), (36, 1, 1), (14, 3, 3), (79, 0, 0), (4, 4, 1), (29, 0, 2), (14, 2, 0), (49, 0, 0), (20, 1, 0), (14, 0, 0), (12, 2, 3), (47, 0, 0), (20, 3, 2), (36, 0, 3), (36, 0, 0), (41, 1, 0), (8, 4, 0), (39, 1, 1), (32, 0, 1), (3, 2, 2), (35, 1, 0), (13, 2, 0), (10, 0, 0), (35, 1, 0), (77, 0, 0), (48, 0, 1), (40, 0, 1), (32, 1, 0), (12, 2, 0), (43, 0, 0), (30, 1, 0), (20, 0, 1), (22, 1, 1), (1, 2, 1), (5, 1, 0), (36, 2, 0), (76, 0, 1), (8, 1, 0), (30, 2, 0), (9, 0, 1), (34, 2, 0), (13, 2, 1), (39, 0, 0), (26, 0, 0), (32, 0, 0), (27, 1, 1), (68, 0, 1), (6, 4, 0), (36, 0, 1), (16, 2, 0), (58, 0, 0), (40, 0, 1), (23, 0, 1), (16, 3, 0), (43, 0, 0), (39, 1, 1), (26, 0, 0), (48, 0, 2), (53, 0, 0), (37, 1, 1), (47, 0, 1), (34, 2, 2), (17, 0, 0), (25, 1, 3), (60, 0, 0), (42, 1, 0), (13, 2, 0), (32, 2, 3), (14, 3, 0), (31, 1, 1), (10, 2, 2), (75, 0, 0), (40, 0, 1), (33, 0, 1), (85, 1, 0), (30, 0, 2), (44, 1, 0), (34, 1, 1), (43, 1, 0), (14, 2, 0), (49, 1, 1), (53, 0, 0), (88, 1, 0), (30, 2, 1), (17, 0, 1), (5, 2, 1), (12, 2, 1), (24, 0, 1), (9, 1, 0), (44, 1, 0), (34, 0, 0), (33, 2, 3), (41, 0, 0), (8, 4, 0), (48, 1, 0), (82, 0, 0), (33, 0, 0), (8, 3, 0), (15, 1, 1), (23, 3, 0), (29, 0, 2), (35, 0, 1), (43, 1, 1), (29, 1, 2), (4, 2, 2), (1, 0, 1), (20, 3, 0), (53, 1, 0), (30, 2, 0), (81, 0, 2), (18, 1, 2), (27, 2, 2), (42, 1, 0), (60, 0, 0), (82, 0, 0), (37, 0, 0), (52, 0, 0), (30, 2, 1), (69, 1, 0), (30, 2, 1), (2, 4, 0), (60, 0, 0), (36, 1, 0), (55, 1, 1), (80, 1, 0), (14, 2, 2), (33, 2, 0), (35, 1, 0), (21, 2, 0), (8, 2, 0), (43, 1, 0), (19, 2, 1), (25, 1, 0), (30, 2, 1), (17, 2, 2), (24, 0, 0), (3, 2, 0), (20, 3, 1), (18, 0, 0), (10, 4, 0), (33, 0, 0), (26, 1, 0), (1, 1, 0), (40, 1, 2), (13, 1, 1), (0, 4, 0), (24, 0, 0), (34, 0, 0), (33, 1, 0), (33, 0, 2), (0, 2, 0), (54, 1, 0), (13, 2, 0), (24, 0, 1), (46, 0, 0), (45, 0, 0), (38, 1, 0), (26, 1, 0), (44, 0, 2), (9, 0, 0), (20, 0, 1), (64, 0, 0), (3, 2, 0), (17, 1, 2), (39, 1, 0), (13, 1, 3), (14, 1, 1), (46, 1, 0), (1, 1, 2), (33, 0, 0), (39, 0, 0), (41, 1, 0), (24, 2, 0), (38, 1, 2), (58, 1, 0), (9, 2, 3), (48, 1, 0), (63, 0, 0), (26, 2, 0), (48, 0, 1), (21, 1, 2), (10, 3, 3), (6, 0, 0), (33, 2, 0), (3, 0, 3), (0, 4, 0), (84, 0, 1), (19, 0, 0), (41, 1, 1), (21, 1, 1), (45, 0, 3), (12, 3, 0)]"]},{"cell_type":"code","source":["import numpy as np\n","p1 = np.array(player)\n","s1 = np.array(score)\n","print(p1)\n","print(s1)"],"metadata":{"id":"Q1KGb2M3jOTJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727796196202,"user_tz":-330,"elapsed":545,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"67bfe350-8a7b-437b-ec21-c292d3c2fef5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[   1    2    3 ... 1500 1501 1502]\n","[[46  1  0]\n"," [19  0  1]\n"," [35  1  0]\n"," ...\n"," [21  1  1]\n"," [45  0  3]\n"," [12  3  0]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"MqjookCBiqVW"},"source":["#### Q-1: What are the dimensions of the array created using the list 'score'?\n","\n","-  1\n","-  2\n","-  3\n","-  4\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7o-0w3waiqVX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711471905045,"user_tz":-330,"elapsed":634,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"49b68548-efd3-4415-b269-5e9c333b5a4f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":115}],"source":["# Type your code here\n","s1.ndim"]},{"cell_type":"markdown","metadata":{"id":"VT44f8agiqVY"},"source":["#### Q-2: How many players scored zero runs in their inning?\n","\n","-  20\n","-  22\n","-  24\n","-  26\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZB-iIpQCiqVZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727796282603,"user_tz":-330,"elapsed":422,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"b25ee2a3-5efd-4277-f03a-8b521005c1d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["26\n"]}],"source":["# Type your code here\n","#s1[s1[0] ==0].size\n","t = len(s1[s1[:,0]==0])\n","print(t)"]},{"cell_type":"markdown","metadata":{"id":"2Pin2m7NiqVa"},"source":["#### Q-3: What is the maximum number of wickets taken by a player?\n","\n","-  4\n","-  6\n","-  3\n","-  5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TECKDEckiqVa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711472274221,"user_tz":-330,"elapsed":9,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"3e1f84fd-488b-4cb2-8455-654537b06d23"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":126}],"source":["# Type your code here\n","np.max(s1[:,1])"]},{"cell_type":"markdown","metadata":{"id":"j_JfPGT1iqVb"},"source":["#### Q-4: Find the ID of the player who scored the maximum runs in the innings\n","\n","\n","-  193\n","-  219\n","-  548\n","-  1021\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WZN2proHiqVc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711472244539,"user_tz":-330,"elapsed":17,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"2678b427-92ee-4e18-ffab-4dd481d7e04a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([548])"]},"metadata":{},"execution_count":123}],"source":["# Type your code here\n","p1[s1[:,0]==np.max(s1[:,0])]"]},{"cell_type":"markdown","metadata":{"id":"h8Yn1mk6iqVd"},"source":["#### Q-5: You are asked to check for all-rounders within the given set of players. How many all-rounders are present in the provided list?\n","An all-rounder is someone who is good in both, batting and bowling.\n","Check if the individual has taken 2 or more wickets and scored more than 35 runs in their innings\n","\n","-  5\n","-  6\n","-  7\n","-  8"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u4fu35_kiqVe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711471958923,"user_tz":-330,"elapsed":345,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}},"outputId":"b5a43109-6cc4-4782-a202-b0185c36604c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":116}],"source":["# Type your code here\n","len(s1[(s1[:,0]>35) & (s1[:,1]>=2)])"]},{"cell_type":"markdown","metadata":{"id":"4yEH6FCQij7p"},"source":["# Exercise Background\n","\n","This small application based coding exercise is ment to expose you to the use of the numpy library as well as give you a taste of tasks that you might be needed to perform during machine learning.\n","\n","Usually, machine learning involves working on large data sets. This notebook will walk you through normalising the data and then dividing the data set into smaller subsets. It is recommended that while attempting each of the tasks visit the NumPy library to find the most appropriate function which can help you achieve the desired result. More often than not you will find the functions which you require prewritten in the library. The **numpy library** can be found [here.](https://numpy.org/doc/stable/)\n","\n","Without further ado, the first task is to mean normalise a data set. Mean normalising is a data transformation done to reduce the variations in the data set. For example, consider a data set which has integers between 0 and 10000. That is a lot of variation, and it becomes difficult to build ML algorithms on this data. So mean normalisation is done on such data, after the transformation, the mean of the data will be zero, and standard deviation will be 1.  Even though the actual values of data will change a lot, but the overall variation is still kept intact. If the concept of normalisation feels a bit unclear dont worry all of this will be covered in the future sections of this program. For now, let’s concentrate on the tasks at hand.\n","\n","\n","# Task 1: Mean Normalisation:\n","\n","**Question 1.1** Create a 2D of random integers between 0 and 10,000 (including both 0 and 10,000) with 25000 rows and 15 columns. This will be the dataset you will use in the notebook."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iZyjd8kRij7s","outputId":"350b94d9-d207-4306-8977-3e4213484937","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727796349053,"user_tz":-330,"elapsed":452,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[3343  110 4150 ... 3894 9247 8348]\n"," [4099 7311 1679 ... 2887 5113  513]\n"," [6491 3705 8683 ... 7284 4189 4591]\n"," ...\n"," [6509 2072 1233 ... 4853 3661 7082]\n"," [4935 3439 3282 ... 3481 4388 2487]\n"," [3751 6426 2727 ...  352  314 7457]]\n"]}],"source":["# import NumPy into Python\n","import numpy as np\n","\n","# Create a 25000 x 15 ndarray with random integers in the interval [0, 10000].\n","a = np.random.randint(0,high=10001,size=(25000,15))  #or size=375000 can also be given\n","X = a.reshape(25000,15)\n","\n","# print the shape of X\n","print(X)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aAqtSAHxij7v","outputId":"b065734c-e982-43b6-c7ed-6e3d0447f993","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727796356752,"user_tz":-330,"elapsed":442,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[3343  110 4150  800  830 9834 8011 3177 2846 8097 4678 1178 3894 9247\n"," 8348]\n"]}],"source":["# print the first row of X\n","print(X[0])"]},{"cell_type":"markdown","metadata":{"id":"TogaBqkBij7v"},"source":["Now that you created the array we will mean normalize it. The equation for normalisaing the data is given below:\n","\n","$\\mbox{Norm_Col}_i = \\frac{\\mbox{Col}_i - \\mu_i}{\\sigma_i}$\n","\n","where $\\mbox{Col}_i$ is the $i$th column of $X$, $\\mu_i$ is average of the values in the $i$th column of $X$, and $\\sigma_i$ is the standard deviation of the values in the $i$th column of $X$. To put it simply, to find the new value of each element, you have to subtract the mean of respective column form that value and divide the result with the standard deviation of that columns. Now the question is, Why are these operations being done column-wise? That is because usually all the procedures in ML are done column-wise. So it will be beneficial for us to develop the habit of thinking about data column-wise.   "]},{"cell_type":"markdown","metadata":{"id":"HmnIX71sij7v"},"source":["**Question 1.2** Find the mean and the standard deviation of each of the columns in the dataset. The result will be two 1D arrays with 15 elements each, representing the mean and standard deviation for each of the columns in the dataset.  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HnGPrRGAij7v","outputId":"008ad338-65fc-4777-b2f9-17d820b0e8a7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711538207518,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[5010.77904 5013.23208 5000.56816 4979.60624 5012.86616 5008.37604\n"," 5015.27472 5001.4384  5011.2364  5037.99644 5007.44784 4971.3174\n"," 5008.5726  4984.42524 5006.4674 ]\n","[2886.2632244  2876.68216779 2907.8212506  2883.92679605 2882.55035625\n"," 2897.50094305 2882.52488497 2873.86476466 2887.53520911 2891.46975066\n"," 2883.21607265 2872.20272838 2898.54170743 2892.46545824 2885.91230128]\n"]}],"source":["# Average of the values in each column of X\n","ave_cols = np.mean(X,axis=0)    #axis=0 means column wise\n","# print ave_cols\n","print(ave_cols)\n","# Standard Deviation of the values in each column of X\n","std_cols = np.std(X,axis=0)\n","# print std_cols\n","print(std_cols)"]},{"cell_type":"markdown","metadata":{"id":"1XIpGU-Sij7v"},"source":["**Question 1.3** Print the shape of each both the arrays, they should have 15 elements each.  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kn5YHVnoij7v","outputId":"c3ecfbbe-a3be-457f-82ff-fef603b91897","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711538240651,"user_tz":-330,"elapsed":566,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(15,)\n","(15,)\n"]}],"source":["# Print the shape of ave_cols\n","print(ave_cols.shape)\n","# Print the shape of std_cols\n","print(std_cols.shape)"]},{"cell_type":"markdown","metadata":{"id":"Q1B9C6KWij7w"},"source":["**Question 1.4** Now that you have mean and standard deviation calculated, it is time to apply the transformation to the dataset.\n","\n","**HINT** The broadcast property of NumPy can make this a lot easier. You can read about it [here](https://numpy.org/doc/stable/user/basics.broadcasting.html).\n","All you have to do is create one row of transformation values and repeat them through all the values."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tGV0Pyjuij7w"},"outputs":[],"source":["# Mean normalize X\n","X_norm = (X - ave_cols)/std_cols"]},{"cell_type":"markdown","metadata":{"id":"GfUHurjuij7w"},"source":["**Question 1.5** If the transformation has been performed correctly, the mean of elements in each column will be approximately 0. Also, the average of the **minimum** value in each column of X_norm and the average of the **maximum** value in each column of X_norm will have almost the same face value with opposite signs. Let’s confirm if the transformation has happened correctly."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5L93BQX4ij7w","outputId":"5b650f8b-71dd-44b2-e3b8-477aa837c140","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711538354325,"user_tz":-330,"elapsed":355,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["3.922195901395753e-18\n","-1.7336009795883607\n","1.730370456422338\n"]}],"source":["# Print the average of all the values of X_norm\n","print (np.average(X_norm))\n","\n","# Print the average of the minimum value in each column of X_norm\n","print (np.average(X_norm.min(axis = 0)))\n","\n","# Print the average of the maximum value in each column of X_norm\n","print (np.average(X_norm.max(axis = 0)))"]},{"cell_type":"markdown","metadata":{"id":"d5sTmD1cij7w"},"source":["Be mindful that the exact values might not match since the dataset was initialized using the random function.\n","\n","# Data Spliting\n","\n","After data processing, it is a regular practice in ML to split the dataset into three datasets.\n","\n","1. A Training Set\n","2. A Cross Validation Set\n","3. A Test Set\n","\n","The ratios in which the data is split varies a bit from case to case. But the accepted standard 6:2:2 for train, test, and validation respectively. That is 60% for training data and so on. Again why is the data split or what is the signification of these smaller data sets? These questions are better left unanswered for now.\n","The tanks assigned to you is to split the data in the given proportions randomly.\n","For instance, if the data set had ten elements, this is how you would do it."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xRzLtqEuij7x","outputId":"561ee674-d15e-457a-9c0b-8ee2a7151f20","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711538478976,"user_tz":-330,"elapsed":383,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([9, 0, 4, 2, 1, 7, 3, 5, 8, 6])"]},"metadata":{},"execution_count":44}],"source":["# We create a random permutation of integers 0 to 9\n","np.random.permutation(10)"]},{"cell_type":"markdown","metadata":{"id":"J6VVf2HDij7x"},"source":["1. training set = 9,0,4,2,1,7\n","2. Cross Validation Set = 8,6\n","3. Test Set = 3,5"]},{"cell_type":"markdown","metadata":{"id":"G00riox-ij7x"},"source":["**Question 2.1** Similarly, create a 1D array representing the indexes of the rows in the dataset X_norm. U can use the   `np.random.permutation()` function for randomising the indexes."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZVE4OYArij7x"},"outputs":[],"source":["# Create a rank 1 ndarray that contains a random permutation of the row indices of `X_norm`\n","row_indices = np.random.permutation(np.arange(0,25000))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C1zD-GIHij7x","outputId":"b831c782-802d-4fe9-c260-1d42007bd182","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711538590816,"user_tz":-330,"elapsed":439,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(25000,)"]},"metadata":{},"execution_count":47}],"source":["# Print the shape of row_indices\n","row_indices.shape"]},{"cell_type":"markdown","metadata":{"id":"nDICQWknij7x"},"source":["**Question 2.2** Split the row indexes in the needed proportions. You can use the slicing methods you have learnt in this session to make the job easier.  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7qsclAfRij7y"},"outputs":[],"source":["# Make any necessary calculations.\n","# You can save your calculations into variables to use later.\n","train = row_indices[:15000]    #60%\n","test = row_indices[15000:20000]    #20%\n","val  = row_indices[20000:]      #20%"]},{"cell_type":"markdown","metadata":{"id":"B-PX2cMfij7y"},"source":["**Question 2.3** Now make use of the indexes that you made to split the data also similarly once the data is split print the shape of each of the smaller data sets. `X_train` should have 15000 rows and 15 columns. `X_test` should have 5000 rows and 15 columns. `X_val` should have 5000 rows and 15 columns."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-lIzjV8nij7y"},"outputs":[],"source":["# Create a Training Set\n","X_train = X_norm[train]\n","\n","# Create a Cross Validation Set\n","X_Val = X_norm[test]\n","\n","# Create a Test Set\n","X_test = X_norm[val]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r2g32uNnij7y","outputId":"ee51a5a6-ff54-460f-dd61-150f4682a281","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711538727902,"user_tz":-330,"elapsed":3,"user":{"displayName":"Shruthi Sony","userId":"00209477465097787481"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(15000, 15)\n","(5000, 15)\n","(5000, 15)\n"]}],"source":["# Print the shape of X_train\n","print(X_train.shape)\n","\n","# Print the shape of X_crossVal\n","print(X_Val.shape)\n","\n","# Print the shape of X_test\n","print(X_test.shape)"]}]}